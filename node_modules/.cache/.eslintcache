[{"/Users/wonjaelee/Desktop/final/src/index.js":"1","/Users/wonjaelee/Desktop/final/src/reportWebVitals.js":"2","/Users/wonjaelee/Desktop/final/src/App.js":"3","/Users/wonjaelee/Desktop/final/src/Javascript/Server.js":"4","/Users/wonjaelee/Desktop/final/src/javascript/Server.js":"5","/Users/wonjaelee/Desktop/final/src/javascript/Router.js":"6","/Users/wonjaelee/Desktop/final/src/Component/PageNotFound.js":"7","/Users/wonjaelee/Desktop/final/src/Component/SamplePage.js":"8","/Users/wonjaelee/Desktop/final/src/javascript/testServer.js":"9"},{"size":534,"mtime":1659706499130,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1659670521666,"results":"12","hashOfConfig":"11"},{"size":163,"mtime":1659706813357,"results":"13","hashOfConfig":"11"},{"size":3216,"mtime":1659679724700,"results":"14","hashOfConfig":"11"},{"size":4689,"mtime":1659721478165,"results":"15","hashOfConfig":"11"},{"size":755,"mtime":1659711693869,"results":"16","hashOfConfig":"11"},{"size":165,"mtime":1659707131910,"results":"17","hashOfConfig":"11"},{"size":894,"mtime":1659721802144,"results":"18","hashOfConfig":"11"},{"size":1038,"mtime":1659721794449,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"12j42qe",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/wonjaelee/Desktop/final/src/index.js",[],[],[],"/Users/wonjaelee/Desktop/final/src/reportWebVitals.js",[],[],"/Users/wonjaelee/Desktop/final/src/App.js",[],[],"/Users/wonjaelee/Desktop/final/src/Javascript/Server.js",["52","53","54","55","56","57","58"],[],"/Users/wonjaelee/Desktop/final/src/javascript/Server.js",["59","60"],[],"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection,where, addDoc, getDoc, doc, updateDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n    authDomain: \"cs160final-5b867.firebaseapp.com\",\n    projectId: \"cs160final-5b867\",\n    storageBucket: \"cs160final-5b867.appspot.com\",\n    messagingSenderId: \"1012297394586\",\n    appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n    measurementId: \"G-ESRLGNL40C\",\n  };\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n\nfunction assert(condition, message) {\n    if (!condition) {\n        throw message || \"Assertion failed\";\n    }\n}\n\nfunction assertFieldExists(object, field) {\n    try {\n        assert(field in object, `Cannot find ${field} in object`)\n    } catch(exception) {\n        throw new Error\n    }\n}\n\n/**\n * This Funtion returns all Post Object from the server\n * @returns {List<Post>}\n */\nexport const getPosts = async () => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n\nexport const getPostsBy = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n export const getPostsExcept = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"!=\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * make post using the Post Object\n * raises an exception when fails.\n * @param {Post}\n * @returns void\n */\nexport const makePost = async (post) => {\n    makePostHelper(\"posts\", post)\n}\n\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param {Comment}\n * @returns void\n */\nconst makeComment = async (comment) => {\n    try {\n        assertFieldExists(comment,\"author\")\n        assertFieldExists(comment,\"content\")\n        assertFieldExists(comment,\"belongsTo\")\n        const docRef = await addDoc(collection(db, \"comments\"), comment);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        console.error(\"Error adding document: \", exception);\n        throw exception\n      }\n}\n\n/**\n * get All Comments filtered by the UUID of the post\n * @param {UUID}\n * @returns {List<Comments>}\n */\n export const getAllComentOf = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"comments\"), where(\"belongsTo\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const comments = []\n    snapShotDocs.forEach(element => {\n        const comment = {\n            id : element.id,\n            ...element.data(), \n        };\n        comments.push(comment)\n    });\n    return comments\n}\n\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param {UUID}\n * @returns {boolean}\n */\nexport const like = async (uuid) => {\n    const docRef = doc(db, \"posts\", uuid);\n    try {\n        const docSnap = await getDoc(docRef);\n        const likes = docSnap.data().likes\n        updateDoc(docRef, {\"likes\" : likes + 1})\n    } catch(error) {\n        console.log(error)\n    }\n}\n\n\n// Helper Functions\nexport const makePostHelper = async (bucket, post) => {\n    try {\n        assertFieldExists(post,\"author\")\n        assertFieldExists(post,\"content\")\n        assertFieldExists(post,\"topic\")\n        post.likes = 0\n        post.createdAt = Date.now();\n        const docRef = await addDoc(collection(db, bucket), post);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        return new Error(\"Error: makePostHelper\")\n      }\n}","/Users/wonjaelee/Desktop/final/src/javascript/Router.js",["61"],[],"import {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\nimport PageNotFound from \"../Component/PageNotFound\"\nimport App from \"../App\"\nimport React from \"react\";\nimport {Container} from \"reactstrap\"\nimport SamplePage from \"../Component/SamplePage\"\n\nconst AppRouter = () => {\n\n    return (\n        <>\n        <Container id = \"Router\">\n          <Router>\n            <Container id = \"content\">\n            <Routes>\n                <Route exact path = \"/\" element={<SamplePage />} />\n                {/* <Route path= \"/posts/:id\" /> */}\n                <Route path = \"*\"default element={<PageNotFound />} />\n            </Routes>\n            </Container>\n          </Router>\n        </Container>\n        </>\n      )\n}\nexport default AppRouter","/Users/wonjaelee/Desktop/final/src/Component/PageNotFound.js",[],[],"/Users/wonjaelee/Desktop/final/src/Component/SamplePage.js",["62","63","64"],[],"import React from \"react\";\nimport '../App.css';\nimport logo from '../logo.svg';\nimport { useEffect } from \"react\";\nimport {getPosts, like} from \"../javascript/Server\"\nimport {runTests} from \"../javascript/testServer\"\n\nconst SamplePage = () => {\n\n    useEffect(() => {\n        // runTests()\n    }\n    )\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n              You can add your html code here to navigate\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>\n        </div>\n      );\n}\n\nexport default SamplePage","/Users/wonjaelee/Desktop/final/src/javascript/testServer.js",["65"],[],"import {makePostHelper} from \"../javascript/Server\"\nconst expectPass = (func,...args) =>  {\n    try {\n        func(...args)\n    } catch (exception) {\n        return exception\n    }\n}\n\nconst expectFail = (func,...args) =>  {\n    try {\n        func(...args)\n    } catch (exception) {\n        console.log(\"catched\")\n    }\n}\n\nconst testMakeFalsyPost = () => {\n    const flawPostObj = {\n        author : \"Wonjae Lee\"\n    }\n\n    if (expectFail(makePostHelper, \"testPosts\", flawPostObj) === Error) {\n        console.log(\"testMakeFalsyPost success\")\n    } else {\n        console.log(\"testMakeFalsyPost failed\")\n    }\n}\n\nconst testMakeNicePost = () => {\n    const flawPostObj = {\n        author : \"Wonjae Lee\",\n        topic : \"topic\",\n        content : \"content\"\n    }\n\n    if (expectPass(makePostHelper, \"testPosts\", flawPostObj) !== Error) {\n        console.log(\"testMakeNicePost success\")\n    } else {\n        console.log(\"testMakeNicePost failed\")\n    }\n}\n\nexport const runTests = () => {\n    // testMakeFalsyPost();\n    testMakeNicePost();\n}",{"ruleId":"66","severity":1,"message":"67","line":25,"column":7,"nodeType":"68","messageId":"69","endLine":25,"endColumn":15},{"ruleId":"66","severity":1,"message":"70","line":45,"column":7,"nodeType":"68","messageId":"69","endLine":45,"endColumn":17},{"ruleId":"66","severity":1,"message":"71","line":64,"column":8,"nodeType":"68","messageId":"69","endLine":64,"endColumn":22},{"ruleId":"66","severity":1,"message":"72","line":84,"column":7,"nodeType":"68","messageId":"69","endLine":84,"endColumn":15},{"ruleId":"66","severity":1,"message":"73","line":95,"column":7,"nodeType":"68","messageId":"69","endLine":95,"endColumn":18},{"ruleId":"66","severity":1,"message":"74","line":104,"column":7,"nodeType":"68","messageId":"69","endLine":104,"endColumn":22},{"ruleId":"66","severity":1,"message":"75","line":115,"column":7,"nodeType":"68","messageId":"69","endLine":115,"endColumn":11},{"ruleId":"76","severity":1,"message":"77","line":28,"column":15,"nodeType":"78","messageId":"79","endLine":28,"endColumn":24,"fix":"80"},{"ruleId":"66","severity":1,"message":"73","line":109,"column":7,"nodeType":"68","messageId":"69","endLine":109,"endColumn":18},{"ruleId":"66","severity":1,"message":"81","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":11},{"ruleId":"66","severity":1,"message":"82","line":5,"column":9,"nodeType":"68","messageId":"69","endLine":5,"endColumn":17},{"ruleId":"66","severity":1,"message":"83","line":5,"column":19,"nodeType":"68","messageId":"69","endLine":5,"endColumn":23},{"ruleId":"66","severity":1,"message":"84","line":6,"column":9,"nodeType":"68","messageId":"69","endLine":6,"endColumn":17},{"ruleId":"66","severity":1,"message":"85","line":18,"column":7,"nodeType":"68","messageId":"69","endLine":18,"endColumn":24},"no-unused-vars","'getPosts' is assigned a value but never used.","Identifier","unusedVar","'getPostsBy' is assigned a value but never used.","'getPostsExcept' is assigned a value but never used.","'makePost' is assigned a value but never used.","'makeComment' is assigned a value but never used.","'getAllCommentOf' is assigned a value but never used.","'like' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"86","text":"87"},"'App' is defined but never used.","'getPosts' is defined but never used.","'like' is defined but never used.","'runTests' is defined but never used.","'testMakeFalsyPost' is assigned a value but never used.",[870,870],"()"]