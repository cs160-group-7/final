{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection, where, addDoc, getDoc, doc, updateDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n  authDomain: \"cs160final-5b867.firebaseapp.com\",\n  projectId: \"cs160final-5b867\",\n  storageBucket: \"cs160final-5b867.appspot.com\",\n  messagingSenderId: \"1012297394586\",\n  appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n  measurementId: \"G-ESRLGNL40C\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw message || \"Assertion failed\";\n  }\n}\n\nfunction assertFieldExists(object, field) {\n  try {\n    assert(field in object, `Cannot find ${field} in object`);\n  } catch (exception) {\n    throw new Error();\n  }\n}\n/**\n * This Funtion returns all Post Object from the server\n * @returns {List<Post>}\n */\n\n\nexport const getPosts = async () => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n\nexport const getPostsBy = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n\nexport const getPostsExcept = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"!=\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * make post using the Post Object\n * raises an exception when fails.\n * @param {Post}\n * @returns void\n */\n\nexport const makePost = async post => {\n  makePostHelper(\"posts\", post);\n};\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param {Comment}\n * @returns void\n */\n\nconst makeComment = async comment => {\n  try {\n    assertFieldExists(comment, \"author\");\n    assertFieldExists(comment, \"content\");\n    assertFieldExists(comment, \"belongsTo\");\n    const docRef = await addDoc(collection(db, \"comments\"), comment);\n    console.log(\"Document written with ID: \", docRef.id);\n  } catch (exception) {\n    console.error(\"Error adding document: \", exception);\n    throw exception;\n  }\n};\n/**\n * get All Comments filtered by the UUID of the post\n * @param {UUID}\n * @returns {List<Comments>}\n */\n\n\nexport const getAllComentOf = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"comments\"), where(\"belongsTo\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const comments = [];\n  snapShotDocs.forEach(element => {\n    const comment = {\n      id: element.id,\n      ...element.data()\n    };\n    comments.push(comment);\n  });\n  return comments;\n};\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param {UUID}\n * @returns {boolean}\n */\n\nexport const like = async uuid => {\n  const docRef = doc(db, \"posts\", uuid);\n\n  try {\n    const docSnap = await getDoc(docRef);\n    const likes = docSnap.data().likes;\n    updateDoc(docRef, {\n      \"likes\": likes + 1\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; // Helper Functions\n\nexport const makePostHelper = async (bucket, post) => {\n  try {\n    assertFieldExists(post, \"author\");\n    assertFieldExists(post, \"content\");\n    assertFieldExists(post, \"topic\");\n    post.likes = 0;\n    post.createdAt = Date.now();\n    const docRef = await addDoc(collection(db, bucket), post);\n    console.log(\"Document written with ID: \", docRef.id);\n  } catch (exception) {\n    return new Error(\"Error: makePostHelper\");\n  }\n};","map":{"version":3,"names":["initializeApp","getFirestore","getDocs","collection","where","addDoc","getDoc","doc","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","assert","condition","message","assertFieldExists","object","field","exception","Error","getPosts","querySnapshot","snapShotDocs","docs","posts","forEach","element","post","id","data","push","console","log","getPostsBy","uuid","getPostsExcept","makePost","makePostHelper","makeComment","comment","docRef","error","getAllComentOf","comments","like","docSnap","likes","bucket","createdAt","Date","now"],"sources":["/Users/wonjaelee/Desktop/final/src/javascript/Server.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection,where, addDoc, getDoc, doc, updateDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n    authDomain: \"cs160final-5b867.firebaseapp.com\",\n    projectId: \"cs160final-5b867\",\n    storageBucket: \"cs160final-5b867.appspot.com\",\n    messagingSenderId: \"1012297394586\",\n    appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n    measurementId: \"G-ESRLGNL40C\",\n  };\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n\nfunction assert(condition, message) {\n    if (!condition) {\n        throw message || \"Assertion failed\";\n    }\n}\n\nfunction assertFieldExists(object, field) {\n    try {\n        assert(field in object, `Cannot find ${field} in object`)\n    } catch(exception) {\n        throw new Error\n    }\n}\n\n/**\n * This Funtion returns all Post Object from the server\n * @returns {List<Post>}\n */\nexport const getPosts = async () => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n\nexport const getPostsBy = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param {UUID}\n * @returns {List<Post>}\n */\n export const getPostsExcept = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"!=\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * make post using the Post Object\n * raises an exception when fails.\n * @param {Post}\n * @returns void\n */\nexport const makePost = async (post) => {\n    makePostHelper(\"posts\", post)\n}\n\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param {Comment}\n * @returns void\n */\nconst makeComment = async (comment) => {\n    try {\n        assertFieldExists(comment,\"author\")\n        assertFieldExists(comment,\"content\")\n        assertFieldExists(comment,\"belongsTo\")\n        const docRef = await addDoc(collection(db, \"comments\"), comment);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        console.error(\"Error adding document: \", exception);\n        throw exception\n      }\n}\n\n/**\n * get All Comments filtered by the UUID of the post\n * @param {UUID}\n * @returns {List<Comments>}\n */\n export const getAllComentOf = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"comments\"), where(\"belongsTo\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const comments = []\n    snapShotDocs.forEach(element => {\n        const comment = {\n            id : element.id,\n            ...element.data(), \n        };\n        comments.push(comment)\n    });\n    return comments\n}\n\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param {UUID}\n * @returns {boolean}\n */\nexport const like = async (uuid) => {\n    const docRef = doc(db, \"posts\", uuid);\n    try {\n        const docSnap = await getDoc(docRef);\n        const likes = docSnap.data().likes\n        updateDoc(docRef, {\"likes\" : likes + 1})\n    } catch(error) {\n        console.log(error)\n    }\n}\n\n\n// Helper Functions\nexport const makePostHelper = async (bucket, post) => {\n    try {\n        assertFieldExists(post,\"author\")\n        assertFieldExists(post,\"content\")\n        assertFieldExists(post,\"topic\")\n        post.likes = 0\n        post.createdAt = Date.now();\n        const docRef = await addDoc(collection(db, bucket), post);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        return new Error(\"Error: makePostHelper\")\n      }\n}"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA2CC,KAA3C,EAAkDC,MAAlD,EAA0DC,MAA1D,EAAkEC,GAAlE,EAAuEC,SAAvE,QAAwF,oBAAxF;AAEA,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCADW;EAEnBC,UAAU,EAAE,kCAFO;EAGnBC,SAAS,EAAE,kBAHQ;EAInBC,aAAa,EAAE,8BAJI;EAKnBC,iBAAiB,EAAE,eALA;EAMnBC,KAAK,EAAE,4CANY;EAOnBC,aAAa,EAAE;AAPI,CAAvB;AAUA,MAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAD,CAAzB;AACA,MAAMS,EAAE,GAAGjB,YAAY,CAACgB,GAAD,CAAvB;;AAGA,SAASE,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAoC;EAChC,IAAI,CAACD,SAAL,EAAgB;IACZ,MAAMC,OAAO,IAAI,kBAAjB;EACH;AACJ;;AAED,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;EACtC,IAAI;IACAL,MAAM,CAACK,KAAK,IAAID,MAAV,EAAmB,eAAcC,KAAM,YAAvC,CAAN;EACH,CAFD,CAEE,OAAMC,SAAN,EAAiB;IACf,MAAM,IAAIC,KAAJ,EAAN;EACH;AACJ;AAED;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,QAAQ,GAAG,YAAY;EAChC,MAAMC,aAAa,GAAG,MAAM1B,OAAO,CAACC,UAAU,CAACe,EAAD,EAAK,OAAL,CAAX,CAAnC;EACA,MAAMW,YAAY,GAAGD,aAAa,CAACE,IAAnC;EACA,MAAMC,KAAK,GAAG,EAAd;EACAF,YAAY,CAACG,OAAb,CAAqBC,OAAO,IAAI;IAC5B,MAAMC,IAAI,GAAG;MACTC,EAAE,EAAGF,OAAO,CAACE,EADJ;MAET,GAAGF,OAAO,CAACG,IAAR;IAFM,CAAb;IAIAL,KAAK,CAACM,IAAN,CAAWH,IAAX;EACH,CAND;EAOAI,OAAO,CAACC,GAAR,CAAYR,KAAZ;EACA,OAAOA,KAAP;AACH,CAbM;AAeP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMS,UAAU,GAAG,MAAOC,IAAP,IAAgB;EACtC,MAAMb,aAAa,GAAG,MAAM1B,OAAO,CAACC,UAAU,CAACe,EAAD,EAAK,OAAL,CAAX,EAA0Bd,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBqC,IAAjB,CAA/B,CAAnC;EACA,MAAMZ,YAAY,GAAGD,aAAa,CAACE,IAAnC;EACA,MAAMC,KAAK,GAAG,EAAd;EACAF,YAAY,CAACG,OAAb,CAAqBC,OAAO,IAAI;IAC5B,MAAMC,IAAI,GAAG;MACTC,EAAE,EAAGF,OAAO,CAACE,EADJ;MAET,GAAGF,OAAO,CAACG,IAAR;IAFM,CAAb;IAIAL,KAAK,CAACM,IAAN,CAAWH,IAAX;EACH,CAND;EAOAI,OAAO,CAACC,GAAR,CAAYR,KAAZ;EACA,OAAOA,KAAP;AACH,CAbM;AAeP;AACA;AACA;AACA;AACA;;AACC,OAAO,MAAMW,cAAc,GAAG,MAAOD,IAAP,IAAgB;EAC3C,MAAMb,aAAa,GAAG,MAAM1B,OAAO,CAACC,UAAU,CAACe,EAAD,EAAK,OAAL,CAAX,EAA0Bd,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBqC,IAAjB,CAA/B,CAAnC;EACA,MAAMZ,YAAY,GAAGD,aAAa,CAACE,IAAnC;EACA,MAAMC,KAAK,GAAG,EAAd;EACAF,YAAY,CAACG,OAAb,CAAqBC,OAAO,IAAI;IAC5B,MAAMC,IAAI,GAAG;MACTC,EAAE,EAAGF,OAAO,CAACE,EADJ;MAET,GAAGF,OAAO,CAACG,IAAR;IAFM,CAAb;IAIAL,KAAK,CAACM,IAAN,CAAWH,IAAX;EACH,CAND;EAOAI,OAAO,CAACC,GAAR,CAAYR,KAAZ;EACA,OAAOA,KAAP;AACH,CAbO;AAeR;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMY,QAAQ,GAAG,MAAOT,IAAP,IAAgB;EACpCU,cAAc,CAAC,OAAD,EAAUV,IAAV,CAAd;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMW,WAAW,GAAG,MAAOC,OAAP,IAAmB;EACnC,IAAI;IACAxB,iBAAiB,CAACwB,OAAD,EAAS,QAAT,CAAjB;IACAxB,iBAAiB,CAACwB,OAAD,EAAS,SAAT,CAAjB;IACAxB,iBAAiB,CAACwB,OAAD,EAAS,WAAT,CAAjB;IACA,MAAMC,MAAM,GAAG,MAAM1C,MAAM,CAACF,UAAU,CAACe,EAAD,EAAK,UAAL,CAAX,EAA6B4B,OAA7B,CAA3B;IACAR,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CQ,MAAM,CAACZ,EAAjD;EACD,CANH,CAMI,OAAOV,SAAP,EAAkB;IAClBa,OAAO,CAACU,KAAR,CAAc,yBAAd,EAAyCvB,SAAzC;IACA,MAAMA,SAAN;EACD;AACN,CAXD;AAaA;AACA;AACA;AACA;AACA;;;AACC,OAAO,MAAMwB,cAAc,GAAG,MAAOR,IAAP,IAAgB;EAC3C,MAAMb,aAAa,GAAG,MAAM1B,OAAO,CAACC,UAAU,CAACe,EAAD,EAAK,UAAL,CAAX,EAA6Bd,KAAK,CAAC,WAAD,EAAc,IAAd,EAAoBqC,IAApB,CAAlC,CAAnC;EACA,MAAMZ,YAAY,GAAGD,aAAa,CAACE,IAAnC;EACA,MAAMoB,QAAQ,GAAG,EAAjB;EACArB,YAAY,CAACG,OAAb,CAAqBC,OAAO,IAAI;IAC5B,MAAMa,OAAO,GAAG;MACZX,EAAE,EAAGF,OAAO,CAACE,EADD;MAEZ,GAAGF,OAAO,CAACG,IAAR;IAFS,CAAhB;IAIAc,QAAQ,CAACb,IAAT,CAAcS,OAAd;EACH,CAND;EAOA,OAAOI,QAAP;AACH,CAZO;AAcR;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,MAAOV,IAAP,IAAgB;EAChC,MAAMM,MAAM,GAAGxC,GAAG,CAACW,EAAD,EAAK,OAAL,EAAcuB,IAAd,CAAlB;;EACA,IAAI;IACA,MAAMW,OAAO,GAAG,MAAM9C,MAAM,CAACyC,MAAD,CAA5B;IACA,MAAMM,KAAK,GAAGD,OAAO,CAAChB,IAAR,GAAeiB,KAA7B;IACA7C,SAAS,CAACuC,MAAD,EAAS;MAAC,SAAUM,KAAK,GAAG;IAAnB,CAAT,CAAT;EACH,CAJD,CAIE,OAAML,KAAN,EAAa;IACXV,OAAO,CAACC,GAAR,CAAYS,KAAZ;EACH;AACJ,CATM,C,CAYP;;AACA,OAAO,MAAMJ,cAAc,GAAG,OAAOU,MAAP,EAAepB,IAAf,KAAwB;EAClD,IAAI;IACAZ,iBAAiB,CAACY,IAAD,EAAM,QAAN,CAAjB;IACAZ,iBAAiB,CAACY,IAAD,EAAM,SAAN,CAAjB;IACAZ,iBAAiB,CAACY,IAAD,EAAM,OAAN,CAAjB;IACAA,IAAI,CAACmB,KAAL,GAAa,CAAb;IACAnB,IAAI,CAACqB,SAAL,GAAiBC,IAAI,CAACC,GAAL,EAAjB;IACA,MAAMV,MAAM,GAAG,MAAM1C,MAAM,CAACF,UAAU,CAACe,EAAD,EAAKoC,MAAL,CAAX,EAAyBpB,IAAzB,CAA3B;IACAI,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CQ,MAAM,CAACZ,EAAjD;EACD,CARH,CAQI,OAAOV,SAAP,EAAkB;IAClB,OAAO,IAAIC,KAAJ,CAAU,uBAAV,CAAP;EACD;AACN,CAZM"},"metadata":{},"sourceType":"module"}