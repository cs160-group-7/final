{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.parseShardPair = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst parseShardPair = pair => {\n  const shardPair = pair.split('/').filter(d => /^\\d+$/.test(d)).map(d => parseInt(d, 10)).filter(shard => !Number.isNaN(shard));\n  const [shardIndex, shardCount] = shardPair;\n\n  if (shardPair.length !== 2) {\n    throw new Error('The shard option requires a string in the format of <n>/<m>.');\n  }\n\n  if (shardIndex === 0 || shardCount === 0) {\n    throw new Error('The shard option requires 1-based values, received 0 or lower in the pair.');\n  }\n\n  if (shardIndex > shardCount) {\n    throw new Error('The shard option <n>/<m> requires <n> to be lower or equal than <m>.');\n  }\n\n  return {\n    shardCount,\n    shardIndex\n  };\n};\n\nexports.parseShardPair = parseShardPair;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseShardPair","pair","shardPair","split","filter","d","test","map","parseInt","shard","Number","isNaN","shardIndex","shardCount","length","Error"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/jest-config/build/parseShardPair.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.parseShardPair = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst parseShardPair = pair => {\n  const shardPair = pair\n    .split('/')\n    .filter(d => /^\\d+$/.test(d))\n    .map(d => parseInt(d, 10))\n    .filter(shard => !Number.isNaN(shard));\n  const [shardIndex, shardCount] = shardPair;\n\n  if (shardPair.length !== 2) {\n    throw new Error(\n      'The shard option requires a string in the format of <n>/<m>.'\n    );\n  }\n\n  if (shardIndex === 0 || shardCount === 0) {\n    throw new Error(\n      'The shard option requires 1-based values, received 0 or lower in the pair.'\n    );\n  }\n\n  if (shardIndex > shardCount) {\n    throw new Error(\n      'The shard option <n>/<m> requires <n> to be lower or equal than <m>.'\n    );\n  }\n\n  return {\n    shardCount,\n    shardIndex\n  };\n};\n\nexports.parseShardPair = parseShardPair;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,cAAc,GAAGC,IAAI,IAAI;EAC7B,MAAMC,SAAS,GAAGD,IAAI,CACnBE,KADe,CACT,GADS,EAEfC,MAFe,CAERC,CAAC,IAAI,QAAQC,IAAR,CAAaD,CAAb,CAFG,EAGfE,GAHe,CAGXF,CAAC,IAAIG,QAAQ,CAACH,CAAD,EAAI,EAAJ,CAHF,EAIfD,MAJe,CAIRK,KAAK,IAAI,CAACC,MAAM,CAACC,KAAP,CAAaF,KAAb,CAJF,CAAlB;EAKA,MAAM,CAACG,UAAD,EAAaC,UAAb,IAA2BX,SAAjC;;EAEA,IAAIA,SAAS,CAACY,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,MAAM,IAAIC,KAAJ,CACJ,8DADI,CAAN;EAGD;;EAED,IAAIH,UAAU,KAAK,CAAf,IAAoBC,UAAU,KAAK,CAAvC,EAA0C;IACxC,MAAM,IAAIE,KAAJ,CACJ,4EADI,CAAN;EAGD;;EAED,IAAIH,UAAU,GAAGC,UAAjB,EAA6B;IAC3B,MAAM,IAAIE,KAAJ,CACJ,sEADI,CAAN;EAGD;;EAED,OAAO;IACLF,UADK;IAELD;EAFK,CAAP;AAID,CA9BD;;AAgCAd,OAAO,CAACE,cAAR,GAAyBA,cAAzB"},"metadata":{},"sourceType":"script"}