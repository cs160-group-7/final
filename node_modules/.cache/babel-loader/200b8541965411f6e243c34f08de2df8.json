{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runJest;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _testResult() {\n  const data = require('@jest/test-result');\n\n  _testResult = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestScheduler = require('./TestScheduler');\n\nvar _collectHandles = _interopRequireDefault(require('./collectHandles'));\n\nvar _getNoTestsFoundMessage = _interopRequireDefault(require('./getNoTestsFoundMessage'));\n\nvar _runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst getTestPaths = async (globalConfig, source, outputStream, changedFiles, jestHooks, filter) => {\n  const data = await source.getTestPaths(globalConfig, changedFiles, filter);\n\n  if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {\n    new (_console().CustomConsole)(outputStream, outputStream).log('Jest can only find uncommitted changed files in a git or hg ' + 'repository. If you make your project a git or hg ' + 'repository (`git init` or `hg init`), Jest will be able ' + 'to only run tests related to files changed since the last ' + 'commit.');\n  }\n\n  const shouldTestArray = await Promise.all(data.tests.map(test => jestHooks.shouldRunTestSuite({\n    config: test.context.config,\n    duration: test.duration,\n    testPath: test.path\n  })));\n  const filteredTests = data.tests.filter((_test, i) => shouldTestArray[i]);\n  return { ...data,\n    allTests: filteredTests.length,\n    tests: filteredTests\n  };\n};\n\nconst processResults = async (runResults, options) => {\n  const {\n    outputFile,\n    json: isJSON,\n    onComplete,\n    outputStream,\n    testResultsProcessor,\n    collectHandles\n  } = options;\n\n  if (collectHandles) {\n    runResults.openHandles = await collectHandles();\n  } else {\n    runResults.openHandles = [];\n  }\n\n  if (testResultsProcessor) {\n    const processor = await (0, _jestUtil().requireOrImportModule)(testResultsProcessor);\n    runResults = processor(runResults);\n  }\n\n  if (isJSON) {\n    if (outputFile) {\n      const cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n      const filePath = path().resolve(cwd, outputFile);\n      fs().writeFileSync(filePath, JSON.stringify((0, _testResult().formatTestResults)(runResults)));\n      outputStream.write(`Test results written to: ${path().relative(cwd, filePath)}\\n`);\n    } else {\n      process.stdout.write(JSON.stringify((0, _testResult().formatTestResults)(runResults)));\n    }\n  }\n\n  onComplete === null || onComplete === void 0 ? void 0 : onComplete(runResults);\n};\n\nconst testSchedulerContext = {\n  firstRun: true,\n  previousSuccess: true\n};\n\nasync function runJest(_ref) {\n  let {\n    contexts,\n    globalConfig,\n    outputStream,\n    testWatcher,\n    jestHooks = new (_jestWatcher().JestHook)().getEmitter(),\n    startRun,\n    changedFilesPromise,\n    onComplete,\n    failedTestsCache,\n    filter\n  } = _ref;\n\n  // Clear cache for required modules - there might be different resolutions\n  // from Jest's config loading to running the tests\n  _jestResolve().default.clearDefaultResolverCache();\n\n  const Sequencer = await (0, _jestUtil().requireOrImportModule)(globalConfig.testSequencer);\n  const sequencer = new Sequencer();\n  let allTests = [];\n\n  if (changedFilesPromise && globalConfig.watch) {\n    const {\n      repos\n    } = await changedFilesPromise;\n    const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n\n    if (noSCM) {\n      process.stderr.write(`\\n${_chalk().default.bold('--watch')} is not supported without git/hg, please use --watchAll\\n`);\n      (0, _exit().default)(1);\n    }\n  }\n\n  const searchSources = contexts.map(context => new _SearchSource.default(context));\n  const testRunData = await Promise.all(contexts.map(async (context, index) => {\n    const searchSource = searchSources[index];\n    const matches = await getTestPaths(globalConfig, searchSource, outputStream, changedFilesPromise && (await changedFilesPromise), jestHooks, filter);\n    allTests = allTests.concat(matches.tests);\n    return {\n      context,\n      matches\n    };\n  }));\n\n  if (globalConfig.shard) {\n    if (typeof sequencer.shard !== 'function') {\n      throw new Error(`Shard ${globalConfig.shard.shardIndex}/${globalConfig.shard.shardCount} requested, but test sequencer ${Sequencer.name} in ${globalConfig.testSequencer} has no shard method.`);\n    }\n\n    allTests = await sequencer.shard(allTests, globalConfig.shard);\n  }\n\n  allTests = await sequencer.sort(allTests);\n\n  if (globalConfig.listTests) {\n    const testsPaths = Array.from(new Set(allTests.map(test => test.path)));\n    /* eslint-disable no-console */\n\n    if (globalConfig.json) {\n      console.log(JSON.stringify(testsPaths));\n    } else {\n      console.log(testsPaths.join('\\n'));\n    }\n    /* eslint-enable */\n\n\n    onComplete && onComplete((0, _testResult().makeEmptyAggregatedTestResult)());\n    return;\n  }\n\n  if (globalConfig.onlyFailures) {\n    if (failedTestsCache) {\n      allTests = failedTestsCache.filterTests(allTests);\n    } else {\n      allTests = await sequencer.allFailedTests(allTests);\n    }\n  }\n\n  const hasTests = allTests.length > 0;\n\n  if (!hasTests) {\n    const {\n      exitWith0,\n      message: noTestsFoundMessage\n    } = (0, _getNoTestsFoundMessage.default)(testRunData, globalConfig);\n\n    if (exitWith0) {\n      new (_console().CustomConsole)(outputStream, outputStream).log(noTestsFoundMessage);\n    } else {\n      new (_console().CustomConsole)(outputStream, outputStream).error(noTestsFoundMessage);\n      (0, _exit().default)(1);\n    }\n  } else if (allTests.length === 1 && globalConfig.silent !== true && globalConfig.verbose !== false) {\n    const newConfig = { ...globalConfig,\n      verbose: true\n    };\n    globalConfig = Object.freeze(newConfig);\n  }\n\n  let collectHandles;\n\n  if (globalConfig.detectOpenHandles) {\n    collectHandles = (0, _collectHandles.default)();\n  }\n\n  if (hasTests) {\n    await (0, _runGlobalHook.default)({\n      allTests,\n      globalConfig,\n      moduleName: 'globalSetup'\n    });\n  }\n\n  if (changedFilesPromise) {\n    const changedFilesInfo = await changedFilesPromise;\n\n    if (changedFilesInfo.changedFiles) {\n      testSchedulerContext.changedFiles = changedFilesInfo.changedFiles;\n      const sourcesRelatedToTestsInChangedFilesArray = (await Promise.all(contexts.map(async (_, index) => {\n        const searchSource = searchSources[index];\n        return searchSource.findRelatedSourcesFromTestsInChangedFiles(changedFilesInfo);\n      }))).reduce((total, paths) => total.concat(paths), []);\n      testSchedulerContext.sourcesRelatedToTestsInChangedFiles = new Set(sourcesRelatedToTestsInChangedFilesArray);\n    }\n  }\n\n  const scheduler = await (0, _TestScheduler.createTestScheduler)(globalConfig, {\n    startRun,\n    ...testSchedulerContext\n  });\n  const results = await scheduler.scheduleTests(allTests, testWatcher);\n  sequencer.cacheResults(allTests, results);\n\n  if (hasTests) {\n    await (0, _runGlobalHook.default)({\n      allTests,\n      globalConfig,\n      moduleName: 'globalTeardown'\n    });\n  }\n\n  await processResults(results, {\n    collectHandles,\n    json: globalConfig.json,\n    onComplete,\n    outputFile: globalConfig.outputFile,\n    outputStream,\n    testResultsProcessor: globalConfig.testResultsProcessor\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","runJest","path","data","_interopRequireWildcard","require","_chalk","_interopRequireDefault","_exit","fs","_console","_testResult","_jestResolve","_jestUtil","_jestWatcher","_SearchSource","_TestScheduler","_collectHandles","_getNoTestsFoundMessage","_runGlobalHook","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getTestPaths","globalConfig","source","outputStream","changedFiles","jestHooks","filter","tests","length","onlyChanged","noSCM","CustomConsole","log","shouldTestArray","Promise","all","map","test","shouldRunTestSuite","config","context","duration","testPath","filteredTests","_test","i","allTests","processResults","runResults","options","outputFile","json","isJSON","onComplete","testResultsProcessor","collectHandles","openHandles","processor","requireOrImportModule","cwd","tryRealpath","process","filePath","resolve","writeFileSync","JSON","stringify","formatTestResults","write","relative","stdout","testSchedulerContext","firstRun","previousSuccess","contexts","testWatcher","JestHook","getEmitter","startRun","changedFilesPromise","failedTestsCache","clearDefaultResolverCache","Sequencer","testSequencer","sequencer","watch","repos","keys","every","scm","size","stderr","bold","searchSources","testRunData","index","searchSource","matches","concat","shard","Error","shardIndex","shardCount","name","sort","listTests","testsPaths","Array","from","Set","console","join","makeEmptyAggregatedTestResult","onlyFailures","filterTests","allFailedTests","hasTests","exitWith0","message","noTestsFoundMessage","error","silent","verbose","newConfig","freeze","detectOpenHandles","moduleName","changedFilesInfo","sourcesRelatedToTestsInChangedFilesArray","_","findRelatedSourcesFromTestsInChangedFiles","reduce","total","paths","sourcesRelatedToTestsInChangedFiles","scheduler","createTestScheduler","results","scheduleTests","cacheResults"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/@jest/core/build/runJest.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runJest;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _testResult() {\n  const data = require('@jest/test-result');\n\n  _testResult = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestScheduler = require('./TestScheduler');\n\nvar _collectHandles = _interopRequireDefault(require('./collectHandles'));\n\nvar _getNoTestsFoundMessage = _interopRequireDefault(\n  require('./getNoTestsFoundMessage')\n);\n\nvar _runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst getTestPaths = async (\n  globalConfig,\n  source,\n  outputStream,\n  changedFiles,\n  jestHooks,\n  filter\n) => {\n  const data = await source.getTestPaths(globalConfig, changedFiles, filter);\n\n  if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {\n    new (_console().CustomConsole)(outputStream, outputStream).log(\n      'Jest can only find uncommitted changed files in a git or hg ' +\n        'repository. If you make your project a git or hg ' +\n        'repository (`git init` or `hg init`), Jest will be able ' +\n        'to only run tests related to files changed since the last ' +\n        'commit.'\n    );\n  }\n\n  const shouldTestArray = await Promise.all(\n    data.tests.map(test =>\n      jestHooks.shouldRunTestSuite({\n        config: test.context.config,\n        duration: test.duration,\n        testPath: test.path\n      })\n    )\n  );\n  const filteredTests = data.tests.filter((_test, i) => shouldTestArray[i]);\n  return {...data, allTests: filteredTests.length, tests: filteredTests};\n};\n\nconst processResults = async (runResults, options) => {\n  const {\n    outputFile,\n    json: isJSON,\n    onComplete,\n    outputStream,\n    testResultsProcessor,\n    collectHandles\n  } = options;\n\n  if (collectHandles) {\n    runResults.openHandles = await collectHandles();\n  } else {\n    runResults.openHandles = [];\n  }\n\n  if (testResultsProcessor) {\n    const processor = await (0, _jestUtil().requireOrImportModule)(\n      testResultsProcessor\n    );\n    runResults = processor(runResults);\n  }\n\n  if (isJSON) {\n    if (outputFile) {\n      const cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n      const filePath = path().resolve(cwd, outputFile);\n      fs().writeFileSync(\n        filePath,\n        JSON.stringify((0, _testResult().formatTestResults)(runResults))\n      );\n      outputStream.write(\n        `Test results written to: ${path().relative(cwd, filePath)}\\n`\n      );\n    } else {\n      process.stdout.write(\n        JSON.stringify((0, _testResult().formatTestResults)(runResults))\n      );\n    }\n  }\n\n  onComplete === null || onComplete === void 0\n    ? void 0\n    : onComplete(runResults);\n};\n\nconst testSchedulerContext = {\n  firstRun: true,\n  previousSuccess: true\n};\n\nasync function runJest({\n  contexts,\n  globalConfig,\n  outputStream,\n  testWatcher,\n  jestHooks = new (_jestWatcher().JestHook)().getEmitter(),\n  startRun,\n  changedFilesPromise,\n  onComplete,\n  failedTestsCache,\n  filter\n}) {\n  // Clear cache for required modules - there might be different resolutions\n  // from Jest's config loading to running the tests\n  _jestResolve().default.clearDefaultResolverCache();\n\n  const Sequencer = await (0, _jestUtil().requireOrImportModule)(\n    globalConfig.testSequencer\n  );\n  const sequencer = new Sequencer();\n  let allTests = [];\n\n  if (changedFilesPromise && globalConfig.watch) {\n    const {repos} = await changedFilesPromise;\n    const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n\n    if (noSCM) {\n      process.stderr.write(\n        `\\n${_chalk().default.bold(\n          '--watch'\n        )} is not supported without git/hg, please use --watchAll\\n`\n      );\n      (0, _exit().default)(1);\n    }\n  }\n\n  const searchSources = contexts.map(\n    context => new _SearchSource.default(context)\n  );\n  const testRunData = await Promise.all(\n    contexts.map(async (context, index) => {\n      const searchSource = searchSources[index];\n      const matches = await getTestPaths(\n        globalConfig,\n        searchSource,\n        outputStream,\n        changedFilesPromise && (await changedFilesPromise),\n        jestHooks,\n        filter\n      );\n      allTests = allTests.concat(matches.tests);\n      return {\n        context,\n        matches\n      };\n    })\n  );\n\n  if (globalConfig.shard) {\n    if (typeof sequencer.shard !== 'function') {\n      throw new Error(\n        `Shard ${globalConfig.shard.shardIndex}/${globalConfig.shard.shardCount} requested, but test sequencer ${Sequencer.name} in ${globalConfig.testSequencer} has no shard method.`\n      );\n    }\n\n    allTests = await sequencer.shard(allTests, globalConfig.shard);\n  }\n\n  allTests = await sequencer.sort(allTests);\n\n  if (globalConfig.listTests) {\n    const testsPaths = Array.from(new Set(allTests.map(test => test.path)));\n    /* eslint-disable no-console */\n\n    if (globalConfig.json) {\n      console.log(JSON.stringify(testsPaths));\n    } else {\n      console.log(testsPaths.join('\\n'));\n    }\n    /* eslint-enable */\n\n    onComplete &&\n      onComplete((0, _testResult().makeEmptyAggregatedTestResult)());\n    return;\n  }\n\n  if (globalConfig.onlyFailures) {\n    if (failedTestsCache) {\n      allTests = failedTestsCache.filterTests(allTests);\n    } else {\n      allTests = await sequencer.allFailedTests(allTests);\n    }\n  }\n\n  const hasTests = allTests.length > 0;\n\n  if (!hasTests) {\n    const {exitWith0, message: noTestsFoundMessage} = (0,\n    _getNoTestsFoundMessage.default)(testRunData, globalConfig);\n\n    if (exitWith0) {\n      new (_console().CustomConsole)(outputStream, outputStream).log(\n        noTestsFoundMessage\n      );\n    } else {\n      new (_console().CustomConsole)(outputStream, outputStream).error(\n        noTestsFoundMessage\n      );\n      (0, _exit().default)(1);\n    }\n  } else if (\n    allTests.length === 1 &&\n    globalConfig.silent !== true &&\n    globalConfig.verbose !== false\n  ) {\n    const newConfig = {...globalConfig, verbose: true};\n    globalConfig = Object.freeze(newConfig);\n  }\n\n  let collectHandles;\n\n  if (globalConfig.detectOpenHandles) {\n    collectHandles = (0, _collectHandles.default)();\n  }\n\n  if (hasTests) {\n    await (0, _runGlobalHook.default)({\n      allTests,\n      globalConfig,\n      moduleName: 'globalSetup'\n    });\n  }\n\n  if (changedFilesPromise) {\n    const changedFilesInfo = await changedFilesPromise;\n\n    if (changedFilesInfo.changedFiles) {\n      testSchedulerContext.changedFiles = changedFilesInfo.changedFiles;\n      const sourcesRelatedToTestsInChangedFilesArray = (\n        await Promise.all(\n          contexts.map(async (_, index) => {\n            const searchSource = searchSources[index];\n            return searchSource.findRelatedSourcesFromTestsInChangedFiles(\n              changedFilesInfo\n            );\n          })\n        )\n      ).reduce((total, paths) => total.concat(paths), []);\n      testSchedulerContext.sourcesRelatedToTestsInChangedFiles = new Set(\n        sourcesRelatedToTestsInChangedFilesArray\n      );\n    }\n  }\n\n  const scheduler = await (0, _TestScheduler.createTestScheduler)(\n    globalConfig,\n    {\n      startRun,\n      ...testSchedulerContext\n    }\n  );\n  const results = await scheduler.scheduleTests(allTests, testWatcher);\n  sequencer.cacheResults(allTests, results);\n\n  if (hasTests) {\n    await (0, _runGlobalHook.default)({\n      allTests,\n      globalConfig,\n      moduleName: 'globalTeardown'\n    });\n  }\n\n  await processResults(results, {\n    collectHandles,\n    json: globalConfig.json,\n    onComplete,\n    outputFile: globalConfig.outputFile,\n    outputStream,\n    testResultsProcessor: globalConfig.testResultsProcessor\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}