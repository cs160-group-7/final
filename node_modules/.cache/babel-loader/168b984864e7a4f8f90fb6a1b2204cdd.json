{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection, where } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n  authDomain: \"cs160final-5b867.firebaseapp.com\",\n  projectId: \"cs160final-5b867\",\n  storageBucket: \"cs160final-5b867.appspot.com\",\n  messagingSenderId: \"1012297394586\",\n  appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n  measurementId: \"G-ESRLGNL40C\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n/**\n * This Funtion returns all Post Object from the server\n * @returns List<Post>\n */\n\nexport const getPosts = async () => {\n  const querySnapshot = await getDocs(collection(db, \"Posts\"));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsBy = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsExcept = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"!=\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * make post using the Post Object\n * return true if the operation was successful.\n * @param Post\n * @returns boolean\n */\n\nconst makePost = post => {\n  return;\n};\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param Comment\n * @returns boolean\n */\n\n\nconst makeComment = Comment => {\n  return;\n};\n/**\n * get All Comments filtered by the UUID of the post\n * @param UUID\n * @returns List<Comments>\n */\n\n\nexport const getAllComentOf = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const Comment = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param UUID\n * @returns boolean\n */\n\nconst like = uuid => {};","map":{"version":3,"names":["initializeApp","getFirestore","getDocs","collection","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","getPosts","querySnapshot","snapShotDocs","docs","posts","forEach","element","post","id","data","push","console","log","getPostsBy","uuid","getPostsExcept","makePost","makeComment","Comment","getAllComentOf","like"],"sources":["/Users/wonjaelee/Desktop/final/src/javascript/Server.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection,where } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n    authDomain: \"cs160final-5b867.firebaseapp.com\",\n    projectId: \"cs160final-5b867\",\n    storageBucket: \"cs160final-5b867.appspot.com\",\n    messagingSenderId: \"1012297394586\",\n    appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n    measurementId: \"G-ESRLGNL40C\",\n  };\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n/**\n * This Funtion returns all Post Object from the server\n * @returns List<Post>\n */\nexport const getPosts = async () => {\n    const querySnapshot = await getDocs(collection(db, \"Posts\"));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsBy = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n export const getPostsExcept = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"!=\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * make post using the Post Object\n * return true if the operation was successful.\n * @param Post\n * @returns boolean\n */\nconst makePost = (post) => {\n    return;\n}\n\n\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param Comment\n * @returns boolean\n */\nconst makeComment = (Comment) => {\n    return;\n}\n\n/**\n * get All Comments filtered by the UUID of the post\n * @param UUID\n * @returns List<Comments>\n */\n export const getAllComentOf = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"Posts\"), where(\"author\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const Comment = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param UUID\n * @returns boolean\n */\nconst like = (uuid) => {\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}