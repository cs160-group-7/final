{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// How long to wait for the child process to terminate\n// after CHILD_MESSAGE_END before sending force exiting.\n\n\nconst FORCE_EXIT_DELAY = 500;\n/* istanbul ignore next */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\n\nconst emptyMethod = () => {};\n\nclass BaseWorkerPool {\n  _stderr;\n  _stdout;\n  _options;\n  _workers;\n\n  constructor(workerPath, options) {\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n    const stdout = (0, _mergeStream().default)();\n    const stderr = (0, _mergeStream().default)();\n    const {\n      forkOptions,\n      maxRetries,\n      resourceLimits,\n      setupArgs\n    } = options;\n\n    for (let i = 0; i < options.numWorkers; i++) {\n      const workerOptions = {\n        forkOptions,\n        maxRetries,\n        resourceLimits,\n        setupArgs,\n        workerId: i,\n        workerPath\n      };\n      const worker = this.createWorker(workerOptions);\n      const workerStdout = worker.getStdout();\n      const workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getWorkers() {\n    return this._workers;\n  }\n\n  getWorkerById(workerId) {\n    return this._workers[workerId];\n  }\n\n  createWorker(_workerOptions) {\n    throw Error('Missing method createWorker in WorkerPool');\n  }\n\n  async end() {\n    // We do not cache the request object here. If so, it would only be only\n    // processed by one of the workers, and we want them all to close.\n    const workerExitPromises = this._workers.map(async worker => {\n      worker.send([_types.CHILD_MESSAGE_END, false], emptyMethod, emptyMethod, emptyMethod); // Schedule a force exit in case worker fails to exit gracefully so\n      // await worker.waitForExit() never takes longer than FORCE_EXIT_DELAY\n\n      let forceExited = false;\n      const forceExitTimeout = setTimeout(() => {\n        worker.forceExit();\n        forceExited = true;\n      }, FORCE_EXIT_DELAY);\n      await worker.waitForExit(); // Worker ideally exited gracefully, don't send force exit then\n\n      clearTimeout(forceExitTimeout);\n      return forceExited;\n    });\n\n    const workerExits = await Promise.all(workerExitPromises);\n    return workerExits.reduce((result, forceExited) => ({\n      forceExited: result.forceExited || forceExited\n    }), {\n      forceExited: false\n    });\n  }\n\n}\n\nexports.default = BaseWorkerPool;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_mergeStream","data","_interopRequireDefault","require","_types","obj","__esModule","FORCE_EXIT_DELAY","emptyMethod","BaseWorkerPool","_stderr","_stdout","_options","_workers","constructor","workerPath","options","Array","numWorkers","stdout","stderr","forkOptions","maxRetries","resourceLimits","setupArgs","i","workerOptions","workerId","worker","createWorker","workerStdout","getStdout","workerStderr","getStderr","add","getWorkers","getWorkerById","_workerOptions","Error","end","workerExitPromises","map","send","CHILD_MESSAGE_END","forceExited","forceExitTimeout","setTimeout","forceExit","waitForExit","clearTimeout","workerExits","Promise","all","reduce","result"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/jest-runtime/node_modules/jest-worker/build/base/BaseWorkerPool.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// How long to wait for the child process to terminate\n// after CHILD_MESSAGE_END before sending force exiting.\nconst FORCE_EXIT_DELAY = 500;\n/* istanbul ignore next */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\n\nconst emptyMethod = () => {};\n\nclass BaseWorkerPool {\n  _stderr;\n  _stdout;\n  _options;\n  _workers;\n\n  constructor(workerPath, options) {\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n    const stdout = (0, _mergeStream().default)();\n    const stderr = (0, _mergeStream().default)();\n    const {forkOptions, maxRetries, resourceLimits, setupArgs} = options;\n\n    for (let i = 0; i < options.numWorkers; i++) {\n      const workerOptions = {\n        forkOptions,\n        maxRetries,\n        resourceLimits,\n        setupArgs,\n        workerId: i,\n        workerPath\n      };\n      const worker = this.createWorker(workerOptions);\n      const workerStdout = worker.getStdout();\n      const workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getWorkers() {\n    return this._workers;\n  }\n\n  getWorkerById(workerId) {\n    return this._workers[workerId];\n  }\n\n  createWorker(_workerOptions) {\n    throw Error('Missing method createWorker in WorkerPool');\n  }\n\n  async end() {\n    // We do not cache the request object here. If so, it would only be only\n    // processed by one of the workers, and we want them all to close.\n    const workerExitPromises = this._workers.map(async worker => {\n      worker.send(\n        [_types.CHILD_MESSAGE_END, false],\n        emptyMethod,\n        emptyMethod,\n        emptyMethod\n      ); // Schedule a force exit in case worker fails to exit gracefully so\n      // await worker.waitForExit() never takes longer than FORCE_EXIT_DELAY\n\n      let forceExited = false;\n      const forceExitTimeout = setTimeout(() => {\n        worker.forceExit();\n        forceExited = true;\n      }, FORCE_EXIT_DELAY);\n      await worker.waitForExit(); // Worker ideally exited gracefully, don't send force exit then\n\n      clearTimeout(forceExitTimeout);\n      return forceExited;\n    });\n\n    const workerExits = await Promise.all(workerExitPromises);\n    return workerExits.reduce(\n      (result, forceExited) => ({\n        forceExited: result.forceExited || forceExited\n      }),\n      {\n        forceExited: false\n      }\n    );\n  }\n}\n\nexports.default = BaseWorkerPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}