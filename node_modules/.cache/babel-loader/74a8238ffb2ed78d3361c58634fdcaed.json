{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n  authDomain: \"cs160final-5b867.firebaseapp.com\",\n  projectId: \"cs160final-5b867\",\n  storageBucket: \"cs160final-5b867.appspot.com\",\n  messagingSenderId: \"1012297394586\",\n  appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n  measurementId: \"G-ESRLGNL40C\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n/**\n * This Funtion returns all Post Object from the server\n * @returns List<Post>\n */\n\nexport const getPosts = async () => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsBy = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsExcept = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"!=\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const posts = [];\n  snapShotDocs.forEach(element => {\n    const post = {\n      id: element.id,\n      ...element.data()\n    };\n    posts.push(post);\n  });\n  console.log(posts);\n  return posts;\n};\n/**\n * make post using the Post Object\n * raises an exception when fails.\n * @param Post\n * @returns void\n */\n\nconst makePost = async post => {\n  try {\n    const docRef = await addDoc(collection(db, \"posts\"), post);\n    console.log(\"Document written with ID: \", docRef.id);\n  } catch (exception) {\n    console.error(\"Error adding document: \", exception);\n  }\n};\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param Comment\n * @returns void\n */\n\n\nconst makeComment = async comment => {\n  try {\n    const docRef = await addDoc(collection(db, \"comments\"), comment);\n    console.log(\"Document written with ID: \", docRef.id);\n  } catch (exception) {\n    console.error(\"Error adding document: \", exception);\n  }\n};\n/**\n * get All Comments filtered by the UUID of the post\n * @param UUID\n * @returns List<Comments>\n */\n\n\nexport const getAllComentOf = async uuid => {\n  const querySnapshot = await getDocs(collection(db, \"comments\"), where(\"belongsTo\", \"==\", uuid));\n  const snapShotDocs = querySnapshot.docs;\n  const comments = [];\n  snapShotDocs.forEach(element => {\n    const comment = {\n      id: element.id,\n      ...element.data()\n    };\n    comments.push(comment);\n  });\n  return comments;\n};\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param UUID\n * @returns boolean\n */\n\nexport const like = async uuid => {\n  const docRef = await getDoc(collection(db, \"posts\"), where(id, \"==\", uuid));\n  return docRef;\n};","map":{"version":3,"names":["initializeApp","getFirestore","getDocs","collection","where","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","getPosts","querySnapshot","snapShotDocs","docs","posts","forEach","element","post","id","data","push","console","log","getPostsBy","uuid","getPostsExcept","makePost","docRef","exception","error","makeComment","comment","getAllComentOf","comments","like","getDoc"],"sources":["/Users/wonjaelee/Desktop/final/src/javascript/Server.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore, getDocs, collection,where, addDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyALs5yvnMRxJdw42Dbq1kXwynjlyJZ67So\",\n    authDomain: \"cs160final-5b867.firebaseapp.com\",\n    projectId: \"cs160final-5b867\",\n    storageBucket: \"cs160final-5b867.appspot.com\",\n    messagingSenderId: \"1012297394586\",\n    appId: \"1:1012297394586:web:f00525a030cfe68449f223\",\n    measurementId: \"G-ESRLGNL40C\",\n  };\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n/**\n * This Funtion returns all Post Object from the server\n * @returns List<Post>\n */\nexport const getPosts = async () => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server by the user\n * filtered by the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n\nexport const getPostsBy = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * This Funtion returns all Post Object from the server Except the designated user's uuid.\n * @param UUID\n * @returns List<Post>\n */\n export const getPostsExcept = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"posts\"), where(\"author\", \"!=\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const posts = []\n    snapShotDocs.forEach(element => {\n        const post = {\n            id : element.id,\n            ...element.data(), \n        };\n        posts.push(post)\n    });\n    console.log(posts)\n    return posts\n}\n\n/**\n * make post using the Post Object\n * raises an exception when fails.\n * @param Post\n * @returns void\n */\nconst makePost = async (post) => {\n    try {\n        const docRef = await addDoc(collection(db, \"posts\"), post);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        console.error(\"Error adding document: \", exception);\n      }\n}\n\n\n/**\n * make Comment using the Comment Object\n * return true if the operation was successful.\n * @param Comment\n * @returns void\n */\nconst makeComment = async (comment) => {\n    try {\n        const docRef = await addDoc(collection(db, \"comments\"), comment);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (exception) {\n        console.error(\"Error adding document: \", exception);\n      }\n}\n\n/**\n * get All Comments filtered by the UUID of the post\n * @param UUID\n * @returns List<Comments>\n */\n export const getAllComentOf = async (uuid) => {\n    const querySnapshot = await getDocs(collection(db, \"comments\"), where(\"belongsTo\", \"==\", uuid));\n    const snapShotDocs = querySnapshot.docs\n    const comments = []\n    snapShotDocs.forEach(element => {\n        const comment = {\n            id : element.id,\n            ...element.data(), \n        };\n        comments.push(comment)\n    });\n    return comments\n}\n\n/**\n * increase like of Post that matches UUID\n * return true if the operation was successful\n * \n * @param UUID\n * @returns boolean\n */\nexport const like = async (uuid) => {\n    const docRef = await getDoc(collection(db, \"posts\"), where(id, \"==\", uuid) );\n    return docRef;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}