{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = normalize;\n\nfunction _crypto() {\n  const data = require('crypto');\n\n  _crypto = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _deepmerge() {\n  const data = _interopRequireDefault(require('deepmerge'));\n\n  _deepmerge = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  const data = require('glob');\n\n  _glob = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = require('graceful-fs');\n\n  _gracefulFs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireWildcard(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _ReporterValidationErrors = require('./ReporterValidationErrors');\n\nvar _ValidConfig = _interopRequireDefault(require('./ValidConfig'));\n\nvar _color = require('./color');\n\nvar _constants = require('./constants');\n\nvar _getMaxWorkers = _interopRequireDefault(require('./getMaxWorkers'));\n\nvar _parseShardPair = require('./parseShardPair');\n\nvar _setFromArgv = _interopRequireDefault(require('./setFromArgv'));\n\nvar _utils = require('./utils');\n\nvar _validatePattern = _interopRequireDefault(require('./validatePattern'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst ERROR = `${_utils.BULLET}Validation Error`;\nconst PRESET_EXTENSIONS = ['.json', '.js', '.cjs', '.mjs'];\nconst PRESET_NAME = 'jest-preset';\n\nconst createConfigError = message => new (_jestValidate().ValidationError)(ERROR, message, _utils.DOCUMENTATION_NOTE);\n\nfunction verifyDirectoryExists(path, key) {\n  try {\n    const rootStat = (0, _gracefulFs().statSync)(path);\n\n    if (!rootStat.isDirectory()) {\n      throw createConfigError(`  ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option is not a directory.`);\n    }\n  } catch (err) {\n    if (err instanceof _jestValidate().ValidationError) {\n      throw err;\n    }\n\n    if (err.code === 'ENOENT') {\n      throw createConfigError(`  Directory ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option was not found.`);\n    } // Not sure in which cases `statSync` can throw, so let's just show the underlying error to the user\n\n\n    throw createConfigError(`  Got an error trying to find ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option.\\n\\n  Error was: ${err.message}`);\n  }\n} // TS 3.5 forces us to split these into 2\n\n\nconst mergeModuleNameMapperWithPreset = (options, preset) => {\n  if (options['moduleNameMapper'] && preset['moduleNameMapper']) {\n    options['moduleNameMapper'] = { ...options['moduleNameMapper'],\n      ...preset['moduleNameMapper'],\n      ...options['moduleNameMapper']\n    };\n  }\n};\n\nconst mergeTransformWithPreset = (options, preset) => {\n  if (options['transform'] && preset['transform']) {\n    options['transform'] = { ...options['transform'],\n      ...preset['transform'],\n      ...options['transform']\n    };\n  }\n};\n\nconst mergeGlobalsWithPreset = (options, preset) => {\n  if (options['globals'] && preset['globals']) {\n    options['globals'] = (0, _deepmerge().default)(preset['globals'], options['globals']);\n  }\n};\n\nconst setupPreset = async (options, optionsPreset) => {\n  let preset;\n  const presetPath = (0, _utils.replaceRootDirInPath)(options.rootDir, optionsPreset);\n\n  const presetModule = _jestResolve().default.findNodeModule(presetPath.startsWith('.') ? presetPath : path().join(presetPath, PRESET_NAME), {\n    basedir: options.rootDir,\n    extensions: PRESET_EXTENSIONS\n  });\n\n  try {\n    if (!presetModule) {\n      throw new Error(`Cannot find module '${presetPath}'`);\n    } // Force re-evaluation to support multiple projects\n\n\n    try {\n      delete require.cache[require.resolve(presetModule)];\n    } catch {}\n\n    preset = await (0, _jestUtil().requireOrImportModule)(presetModule);\n  } catch (error) {\n    if (error instanceof SyntaxError || error instanceof TypeError) {\n      throw createConfigError(`  Preset ${_chalk().default.bold(presetPath)} is invalid:\\n\\n  ${error.message}\\n  ${error.stack}`);\n    }\n\n    if (error.message.includes('Cannot find module')) {\n      if (error.message.includes(presetPath)) {\n        const preset = _jestResolve().default.findNodeModule(presetPath, {\n          basedir: options.rootDir\n        });\n\n        if (preset) {\n          throw createConfigError(`  Module ${_chalk().default.bold(presetPath)} should have \"jest-preset.js\" or \"jest-preset.json\" file at the root.`);\n        }\n\n        throw createConfigError(`  Preset ${_chalk().default.bold(presetPath)} not found.`);\n      }\n\n      throw createConfigError(`  Missing dependency in ${_chalk().default.bold(presetPath)}:\\n\\n  ${error.message}\\n  ${error.stack}`);\n    }\n\n    throw createConfigError(`  An unknown error occurred in ${_chalk().default.bold(presetPath)}:\\n\\n  ${error.message}\\n  ${error.stack}`);\n  }\n\n  if (options.setupFiles) {\n    options.setupFiles = (preset.setupFiles || []).concat(options.setupFiles);\n  }\n\n  if (options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = (preset.setupFilesAfterEnv || []).concat(options.setupFilesAfterEnv);\n  }\n\n  if (options.modulePathIgnorePatterns && preset.modulePathIgnorePatterns) {\n    options.modulePathIgnorePatterns = preset.modulePathIgnorePatterns.concat(options.modulePathIgnorePatterns);\n  }\n\n  mergeModuleNameMapperWithPreset(options, preset);\n  mergeTransformWithPreset(options, preset);\n  mergeGlobalsWithPreset(options, preset);\n  return { ...preset,\n    ...options\n  };\n};\n\nconst setupBabelJest = options => {\n  const transform = options.transform;\n  let babelJest;\n\n  if (transform) {\n    const customJSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.js') || regex.test('a.jsx');\n    });\n    const customTSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.ts') || regex.test('a.tsx');\n    });\n    [customJSPattern, customTSPattern].forEach(pattern => {\n      if (pattern) {\n        const customTransformer = transform[pattern];\n\n        if (Array.isArray(customTransformer)) {\n          if (customTransformer[0] === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            customTransformer[0] = babelJest;\n          } else if (customTransformer[0].includes('babel-jest')) {\n            babelJest = customTransformer[0];\n          }\n        } else {\n          if (customTransformer === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            transform[pattern] = babelJest;\n          } else if (customTransformer.includes('babel-jest')) {\n            babelJest = customTransformer;\n          }\n        }\n      }\n    });\n  } else {\n    babelJest = require.resolve('babel-jest');\n    options.transform = {\n      [_constants.DEFAULT_JS_PATTERN]: babelJest\n    };\n  }\n};\n\nconst normalizeCollectCoverageOnlyFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  const collectCoverageOnlyFrom = Array.isArray(initialCollectCoverageFrom) ? initialCollectCoverageFrom // passed from argv\n  : Object.keys(initialCollectCoverageFrom); // passed from options\n\n  return collectCoverageOnlyFrom.reduce((map, filePath) => {\n    filePath = path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, filePath));\n    map[filePath] = true;\n    return map;\n  }, Object.create(null));\n};\n\nconst normalizeCollectCoverageFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  let value;\n\n  if (!initialCollectCoverageFrom) {\n    value = [];\n  }\n\n  if (!Array.isArray(initialCollectCoverageFrom)) {\n    try {\n      value = JSON.parse(initialCollectCoverageFrom);\n    } catch {}\n\n    if (options[key] && !Array.isArray(value)) {\n      value = [initialCollectCoverageFrom];\n    }\n  } else {\n    value = initialCollectCoverageFrom;\n  }\n\n  if (value) {\n    value = value.map(filePath => filePath.replace(/^(!?)(<rootDir>\\/)(.*)/, '$1$3'));\n  }\n\n  return value;\n};\n\nconst normalizeUnmockedModulePathPatterns = (options, key // _replaceRootDirTags is specifically well-suited for substituting\n) => // <rootDir> in paths (it deals with properly interpreting relative path\n// separators, etc).\n//\n// For patterns, direct global substitution is far more ideal, so we\n// special case substitutions for patterns here.\noptions[key].map(pattern => (0, _jestRegexUtil().replacePathSepForRegex)(pattern.replace(/<rootDir>/g, options.rootDir)));\n\nconst normalizeMissingOptions = (options, configPath, projectIndex) => {\n  if (!options.id) {\n    options.id = (0, _crypto().createHash)('sha256').update(options.rootDir) // In case we load config from some path that has the same root dir\n    .update(configPath || '').update(String(projectIndex)).digest('hex').substring(0, 32);\n  }\n\n  if (!options.setupFiles) {\n    options.setupFiles = [];\n  }\n\n  return options;\n};\n\nconst normalizeRootDir = options => {\n  // Assert that there *is* a rootDir\n  if (!options.rootDir) {\n    throw createConfigError(`  Configuration option ${_chalk().default.bold('rootDir')} must be specified.`);\n  }\n\n  options.rootDir = path().normalize(options.rootDir);\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    options.rootDir = (0, _jestUtil().tryRealpath)(options.rootDir);\n  } catch {// ignored\n  }\n\n  verifyDirectoryExists(options.rootDir, 'rootDir');\n  return { ...options,\n    rootDir: options.rootDir\n  };\n};\n\nconst normalizeReporters = _ref => {\n  let {\n    reporters,\n    rootDir\n  } = _ref;\n\n  if (!reporters || !Array.isArray(reporters)) {\n    return undefined;\n  }\n\n  (0, _ReporterValidationErrors.validateReporters)(reporters);\n  return reporters.map(reporterConfig => {\n    const normalizedReporterConfig = typeof reporterConfig === 'string' // if reporter config is a string, we wrap it in an array\n    ? // and pass an empty object for options argument, to normalize\n    // the shape.\n    [reporterConfig, {}] : reporterConfig;\n    const reporterPath = (0, _utils.replaceRootDirInPath)(rootDir, normalizedReporterConfig[0]);\n\n    if (!['default', 'github-actions', 'summary'].includes(reporterPath)) {\n      const reporter = _jestResolve().default.findNodeModule(reporterPath, {\n        basedir: rootDir\n      });\n\n      if (!reporter) {\n        throw new (_jestResolve().default.ModuleNotFoundError)('Could not resolve a module for a custom reporter.\\n' + `  Module name: ${reporterPath}`);\n      }\n\n      normalizedReporterConfig[0] = reporter;\n    }\n\n    return normalizedReporterConfig;\n  });\n};\n\nconst buildTestPathPattern = argv => {\n  const patterns = [];\n\n  if (argv._) {\n    patterns.push(...argv._);\n  }\n\n  if (argv.testPathPattern) {\n    patterns.push(...argv.testPathPattern);\n  }\n\n  const replacePosixSep = pattern => {\n    // yargs coerces positional args into numbers\n    const patternAsString = pattern.toString();\n\n    if (path().sep === '/') {\n      return patternAsString;\n    }\n\n    return patternAsString.replace(/\\//g, '\\\\\\\\');\n  };\n\n  const testPathPattern = patterns.map(replacePosixSep).join('|');\n\n  if ((0, _validatePattern.default)(testPathPattern)) {\n    return testPathPattern;\n  } else {\n    showTestPathPatternError(testPathPattern);\n    return '';\n  }\n};\n\nconst showTestPathPatternError = testPathPattern => {\n  (0, _jestUtil().clearLine)(process.stdout); // eslint-disable-next-line no-console\n\n  console.log(_chalk().default.red(`  Invalid testPattern ${testPathPattern} supplied. ` + 'Running all tests instead.'));\n};\n\nfunction validateExtensionsToTreatAsEsm(extensionsToTreatAsEsm) {\n  if (!extensionsToTreatAsEsm || extensionsToTreatAsEsm.length === 0) {\n    return;\n  }\n\n  function printConfig(opts) {\n    const string = opts.map(ext => `'${ext}'`).join(', ');\n    return _chalk().default.bold(`extensionsToTreatAsEsm: [${string}]`);\n  }\n\n  const extensionWithoutDot = extensionsToTreatAsEsm.some(ext => !ext.startsWith('.'));\n\n  if (extensionWithoutDot) {\n    throw createConfigError(`  Option: ${printConfig(extensionsToTreatAsEsm)} includes a string that does not start with a period (${_chalk().default.bold('.')}).\n  Please change your configuration to ${printConfig(extensionsToTreatAsEsm.map(ext => ext.startsWith('.') ? ext : `.${ext}`))}.`);\n  }\n\n  if (extensionsToTreatAsEsm.includes('.js')) {\n    throw createConfigError(`  Option: ${printConfig(extensionsToTreatAsEsm)} includes ${_chalk().default.bold(\"'.js'\")} which is always inferred based on ${_chalk().default.bold('type')} in its nearest ${_chalk().default.bold('package.json')}.`);\n  }\n\n  if (extensionsToTreatAsEsm.includes('.cjs')) {\n    throw createConfigError(`  Option: ${printConfig(extensionsToTreatAsEsm)} includes ${_chalk().default.bold(\"'.cjs'\")} which is always treated as CommonJS.`);\n  }\n\n  if (extensionsToTreatAsEsm.includes('.mjs')) {\n    throw createConfigError(`  Option: ${printConfig(extensionsToTreatAsEsm)} includes ${_chalk().default.bold(\"'.mjs'\")} which is always treated as an ECMAScript Module.`);\n  }\n}\n\nasync function normalize(initialOptions, argv, configPath) {\n  let projectIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n\n  var _options$haste, _argv$_;\n\n  const {\n    hasDeprecationWarnings\n  } = (0, _jestValidate().validate)(initialOptions, {\n    comment: _utils.DOCUMENTATION_NOTE,\n    deprecatedConfig: _Deprecated.default,\n    exampleConfig: _ValidConfig.default,\n    recursiveDenylist: ['collectCoverageOnlyFrom', // 'coverageThreshold' allows to use 'global' and glob strings on the same\n    // level, there's currently no way we can deal with such config\n    'coverageThreshold', 'globals', 'moduleNameMapper', 'testEnvironmentOptions', 'transform']\n  });\n  let options = normalizeMissingOptions(normalizeRootDir((0, _setFromArgv.default)(initialOptions, argv)), configPath, projectIndex);\n\n  if (options.preset) {\n    options = await setupPreset(options, options.preset);\n  }\n\n  if (!options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = [];\n  }\n\n  options.testEnvironment = (0, _jestResolve().resolveTestEnvironment)({\n    requireResolveFunction: require.resolve,\n    rootDir: options.rootDir,\n    testEnvironment: options.testEnvironment || require.resolve(_Defaults.default.testEnvironment)\n  });\n\n  if (!options.roots) {\n    options.roots = [options.rootDir];\n  }\n\n  if (!options.testRunner || options.testRunner === 'circus' || options.testRunner === 'jest-circus' || options.testRunner === 'jest-circus/runner') {\n    options.testRunner = require.resolve('jest-circus/runner');\n  } else if (options.testRunner === 'jasmine2') {\n    try {\n      options.testRunner = require.resolve('jest-jasmine2');\n    } catch (error) {\n      if (error.code === 'MODULE_NOT_FOUND') {\n        throw createConfigError('jest-jasmine is no longer shipped by default with Jest, you need to install it explicitly or provide an absolute path to Jest');\n      }\n\n      throw error;\n    }\n  }\n\n  if (!options.coverageDirectory) {\n    options.coverageDirectory = path().resolve(options.rootDir, 'coverage');\n  }\n\n  setupBabelJest(options); // TODO: Type this properly\n\n  const newOptions = { ..._Defaults.default\n  };\n\n  if (options.resolver) {\n    newOptions.resolver = (0, _utils.resolve)(null, {\n      filePath: options.resolver,\n      key: 'resolver',\n      rootDir: options.rootDir\n    });\n  }\n\n  validateExtensionsToTreatAsEsm(options.extensionsToTreatAsEsm);\n\n  if (options.watchman == null) {\n    options.watchman = _Defaults.default.watchman;\n  }\n\n  const optionKeys = Object.keys(options);\n  optionKeys.reduce((newOptions, key) => {\n    // The resolver has been resolved separately; skip it\n    if (key === 'resolver') {\n      return newOptions;\n    } // This is cheating, because it claims that all keys of InitialOptions are Required.\n    // We only really know it's Required for oldOptions[key], not for oldOptions.someOtherKey,\n    // so oldOptions[key] is the only way it should be used.\n\n\n    const oldOptions = options;\n    let value;\n\n    switch (key) {\n      case 'collectCoverageOnlyFrom':\n        value = normalizeCollectCoverageOnlyFrom(oldOptions, key);\n        break;\n\n      case 'setupFiles':\n      case 'setupFilesAfterEnv':\n      case 'snapshotSerializers':\n        {\n          const option = oldOptions[key];\n          value = option && option.map(filePath => (0, _utils.resolve)(newOptions.resolver, {\n            filePath,\n            key,\n            rootDir: options.rootDir\n          }));\n        }\n        break;\n\n      case 'modulePaths':\n      case 'roots':\n        {\n          const option = oldOptions[key];\n          value = option && option.map(filePath => path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)));\n        }\n        break;\n\n      case 'collectCoverageFrom':\n        value = normalizeCollectCoverageFrom(oldOptions, key);\n        break;\n\n      case 'cacheDirectory':\n      case 'coverageDirectory':\n        {\n          const option = oldOptions[key];\n          value = option && path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, option));\n        }\n        break;\n\n      case 'dependencyExtractor':\n      case 'globalSetup':\n      case 'globalTeardown':\n      case 'runtime':\n      case 'snapshotResolver':\n      case 'testResultsProcessor':\n      case 'testRunner':\n      case 'filter':\n        {\n          const option = oldOptions[key];\n          value = option && (0, _utils.resolve)(newOptions.resolver, {\n            filePath: option,\n            key,\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'runner':\n        {\n          const option = oldOptions[key];\n          value = option && (0, _jestResolve().resolveRunner)(newOptions.resolver, {\n            filePath: option,\n            requireResolveFunction: require.resolve,\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'prettierPath':\n        {\n          // We only want this to throw if \"prettierPath\" is explicitly passed\n          // from config or CLI, and the requested path isn't found. Otherwise we\n          // set it to null and throw an error lazily when it is used.\n          const option = oldOptions[key];\n          value = option && (0, _utils.resolve)(newOptions.resolver, {\n            filePath: option,\n            key,\n            optional: option === _Defaults.default[key],\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'moduleNameMapper':\n        const moduleNameMapper = oldOptions[key];\n        value = moduleNameMapper && Object.keys(moduleNameMapper).map(regex => {\n          const item = moduleNameMapper && moduleNameMapper[regex];\n          return item && [regex, (0, _utils._replaceRootDirTags)(options.rootDir, item)];\n        });\n        break;\n\n      case 'transform':\n        const transform = oldOptions[key];\n        value = transform && Object.keys(transform).map(regex => {\n          const transformElement = transform[regex];\n          return [regex, (0, _utils.resolve)(newOptions.resolver, {\n            filePath: Array.isArray(transformElement) ? transformElement[0] : transformElement,\n            key,\n            rootDir: options.rootDir\n          }), Array.isArray(transformElement) ? transformElement[1] : {}];\n        });\n        break;\n\n      case 'reporters':\n        value = normalizeReporters(oldOptions);\n        break;\n\n      case 'coveragePathIgnorePatterns':\n      case 'modulePathIgnorePatterns':\n      case 'testPathIgnorePatterns':\n      case 'transformIgnorePatterns':\n      case 'watchPathIgnorePatterns':\n      case 'unmockedModulePathPatterns':\n        value = normalizeUnmockedModulePathPatterns(oldOptions, key);\n        break;\n\n      case 'haste':\n        value = { ...oldOptions[key]\n        };\n\n        if (value.hasteImplModulePath != null) {\n          const resolvedHasteImpl = (0, _utils.resolve)(newOptions.resolver, {\n            filePath: (0, _utils.replaceRootDirInPath)(options.rootDir, value.hasteImplModulePath),\n            key: 'haste.hasteImplModulePath',\n            rootDir: options.rootDir\n          });\n          value.hasteImplModulePath = resolvedHasteImpl || undefined;\n        }\n\n        break;\n\n      case 'projects':\n        value = (oldOptions[key] || []).map(project => typeof project === 'string' ? (0, _utils._replaceRootDirTags)(options.rootDir, project) : project).reduce((projects, project) => {\n          // Project can be specified as globs. If a glob matches any files,\n          // We expand it to these paths. If not, we keep the original path\n          // for the future resolution.\n          const globMatches = typeof project === 'string' ? (0, _glob().sync)(project) : [];\n          return projects.concat(globMatches.length ? globMatches : project);\n        }, []);\n        break;\n\n      case 'moduleDirectories':\n      case 'testMatch':\n        {\n          const replacedRootDirTags = (0, _utils._replaceRootDirTags)((0, _utils.escapeGlobCharacters)(options.rootDir), oldOptions[key]);\n\n          if (replacedRootDirTags) {\n            value = Array.isArray(replacedRootDirTags) ? replacedRootDirTags.map(_jestUtil().replacePathSepForGlob) : (0, _jestUtil().replacePathSepForGlob)(replacedRootDirTags);\n          } else {\n            value = replacedRootDirTags;\n          }\n        }\n        break;\n\n      case 'testRegex':\n        {\n          const option = oldOptions[key];\n          value = option ? (Array.isArray(option) ? option : [option]).map(_jestRegexUtil().replacePathSepForRegex) : [];\n        }\n        break;\n\n      case 'moduleFileExtensions':\n        {\n          value = oldOptions[key];\n\n          if (Array.isArray(value) && ( // If it's the wrong type, it can throw at a later time\n          options.runner === undefined || options.runner === _Defaults.default.runner) && // Only require 'js' for the default jest-runner\n          !value.includes('js')) {\n            const errorMessage = \"  moduleFileExtensions must include 'js':\\n\" + '  but instead received:\\n' + `    ${_chalk().default.bold.red(JSON.stringify(value))}`; // If `js` is not included, any dependency Jest itself injects into\n            // the environment, like jasmine or sourcemap-support, will need to\n            // `require` its modules with a file extension. This is not plausible\n            // in the long run, so it's way easier to just fail hard early.\n            // We might consider throwing if `json` is missing as well, as it's a\n            // fair assumption from modules that they can do\n            // `require('some-package/package') without the trailing `.json` as it\n            // works in Node normally.\n\n            throw createConfigError(`${errorMessage}\\n  Please change your configuration to include 'js'.`);\n          }\n\n          break;\n        }\n\n      case 'bail':\n        {\n          const bail = oldOptions[key];\n\n          if (typeof bail === 'boolean') {\n            value = bail ? 1 : 0;\n          } else if (typeof bail === 'string') {\n            value = 1; // If Jest is invoked as `jest --bail someTestPattern` then need to\n            // move the pattern from the `bail` configuration and into `argv._`\n            // to be processed as an extra parameter\n\n            argv._.push(bail);\n          } else {\n            value = oldOptions[key];\n          }\n\n          break;\n        }\n\n      case 'displayName':\n        {\n          const displayName = oldOptions[key];\n          /**\n           * Ensuring that displayName shape is correct here so that the\n           * reporters can trust the shape of the data\n           */\n\n          if (typeof displayName === 'object') {\n            const {\n              name,\n              color\n            } = displayName;\n\n            if (!name || !color || typeof name !== 'string' || typeof color !== 'string') {\n              const errorMessage = `  Option \"${_chalk().default.bold('displayName')}\" must be of type:\\n\\n` + '  {\\n' + '    name: string;\\n' + '    color: string;\\n' + '  }\\n';\n              throw createConfigError(errorMessage);\n            }\n\n            value = oldOptions[key];\n          } else {\n            value = {\n              color: (0, _color.getDisplayNameColor)(options.runner),\n              name: displayName\n            };\n          }\n\n          break;\n        }\n\n      case 'testTimeout':\n        {\n          if (oldOptions[key] < 0) {\n            throw createConfigError(`  Option \"${_chalk().default.bold('testTimeout')}\" must be a natural number.`);\n          }\n\n          value = oldOptions[key];\n          break;\n        }\n\n      case 'automock':\n      case 'cache':\n      case 'changedSince':\n      case 'changedFilesWithAncestor':\n      case 'clearMocks':\n      case 'collectCoverage':\n      case 'coverageProvider':\n      case 'coverageReporters':\n      case 'coverageThreshold':\n      case 'detectLeaks':\n      case 'detectOpenHandles':\n      case 'errorOnDeprecated':\n      case 'expand':\n      case 'extensionsToTreatAsEsm':\n      case 'globals':\n      case 'fakeTimers':\n      case 'findRelatedTests':\n      case 'forceCoverageMatch':\n      case 'forceExit':\n      case 'injectGlobals':\n      case 'lastCommit':\n      case 'listTests':\n      case 'logHeapUsage':\n      case 'maxConcurrency':\n      case 'id':\n      case 'noStackTrace':\n      case 'notify':\n      case 'notifyMode':\n      case 'onlyChanged':\n      case 'onlyFailures':\n      case 'outputFile':\n      case 'passWithNoTests':\n      case 'replname':\n      case 'resetMocks':\n      case 'resetModules':\n      case 'restoreMocks':\n      case 'rootDir':\n      case 'runTestsByPath':\n      case 'sandboxInjectedGlobals':\n      case 'silent':\n      case 'skipFilter':\n      case 'skipNodeResolution':\n      case 'slowTestThreshold':\n      case 'snapshotFormat':\n      case 'testEnvironment':\n      case 'testEnvironmentOptions':\n      case 'testFailureExitCode':\n      case 'testLocationInResults':\n      case 'testNamePattern':\n      case 'useStderr':\n      case 'verbose':\n      case 'watch':\n      case 'watchAll':\n      case 'watchman':\n        value = oldOptions[key];\n        break;\n\n      case 'watchPlugins':\n        value = (oldOptions[key] || []).map(watchPlugin => {\n          if (typeof watchPlugin === 'string') {\n            return {\n              config: {},\n              path: (0, _jestResolve().resolveWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin,\n                requireResolveFunction: require.resolve,\n                rootDir: options.rootDir\n              })\n            };\n          } else {\n            return {\n              config: watchPlugin[1] || {},\n              path: (0, _jestResolve().resolveWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin[0],\n                requireResolveFunction: require.resolve,\n                rootDir: options.rootDir\n              })\n            };\n          }\n        });\n        break;\n    } // @ts-expect-error: automock is missing in GlobalConfig, so what\n\n\n    newOptions[key] = value;\n    return newOptions;\n  }, newOptions);\n\n  if (options.watchman && (_options$haste = options.haste) !== null && _options$haste !== void 0 && _options$haste.enableSymlinks) {\n    throw new (_jestValidate().ValidationError)('Validation Error', 'haste.enableSymlinks is incompatible with watchman', 'Either set haste.enableSymlinks to false or do not use watchman');\n  }\n\n  newOptions.roots.forEach((root, i) => {\n    verifyDirectoryExists(root, `roots[${i}]`);\n  });\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    newOptions.cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n  } catch {// ignored\n  }\n\n  newOptions.testSequencer = (0, _jestResolve().resolveSequencer)(newOptions.resolver, {\n    filePath: options.testSequencer || require.resolve(_Defaults.default.testSequencer),\n    requireResolveFunction: require.resolve,\n    rootDir: options.rootDir\n  });\n\n  if (newOptions.runner === _Defaults.default.runner) {\n    newOptions.runner = require.resolve(newOptions.runner);\n  }\n\n  newOptions.nonFlagArgs = (_argv$_ = argv._) === null || _argv$_ === void 0 ? void 0 : _argv$_.map(arg => `${arg}`);\n  newOptions.testPathPattern = buildTestPathPattern(argv);\n  newOptions.json = !!argv.json;\n  newOptions.testFailureExitCode = parseInt(newOptions.testFailureExitCode, 10);\n\n  if (newOptions.lastCommit || newOptions.changedFilesWithAncestor || newOptions.changedSince) {\n    newOptions.onlyChanged = true;\n  }\n\n  if (argv.all) {\n    newOptions.onlyChanged = false;\n    newOptions.onlyFailures = false;\n  } else if (newOptions.testPathPattern) {\n    // When passing a test path pattern we don't want to only monitor changed\n    // files unless `--watch` is also passed.\n    newOptions.onlyChanged = newOptions.watch;\n  }\n\n  if (!newOptions.onlyChanged) {\n    newOptions.onlyChanged = false;\n  }\n\n  if (!newOptions.lastCommit) {\n    newOptions.lastCommit = false;\n  }\n\n  if (!newOptions.onlyFailures) {\n    newOptions.onlyFailures = false;\n  }\n\n  if (!newOptions.watchAll) {\n    newOptions.watchAll = false;\n  } // as unknown since it can happen. We really need to fix the types here\n\n\n  if (newOptions.moduleNameMapper === _Defaults.default.moduleNameMapper) {\n    newOptions.moduleNameMapper = [];\n  }\n\n  if (argv.ci != null) {\n    newOptions.ci = argv.ci;\n  }\n\n  newOptions.updateSnapshot = newOptions.ci && !argv.updateSnapshot ? 'none' : argv.updateSnapshot ? 'all' : 'new';\n  newOptions.maxConcurrency = parseInt(newOptions.maxConcurrency, 10);\n  newOptions.maxWorkers = (0, _getMaxWorkers.default)(argv, options);\n\n  if (newOptions.testRegex.length && options.testMatch) {\n    throw createConfigError(`  Configuration options ${_chalk().default.bold('testMatch')} and` + ` ${_chalk().default.bold('testRegex')} cannot be used together.`);\n  }\n\n  if (newOptions.testRegex.length && !options.testMatch) {\n    // Prevent the default testMatch conflicting with any explicitly\n    // configured `testRegex` value\n    newOptions.testMatch = [];\n  } // If argv.json is set, coverageReporters shouldn't print a text report.\n\n\n  if (argv.json) {\n    newOptions.coverageReporters = (newOptions.coverageReporters || []).filter(reporter => reporter !== 'text');\n  } // If collectCoverage is enabled while using --findRelatedTests we need to\n  // avoid having false negatives in the generated coverage report.\n  // The following: `--findRelatedTests '/rootDir/file1.js' --coverage`\n  // Is transformed to: `--findRelatedTests '/rootDir/file1.js' --coverage --collectCoverageFrom 'file1.js'`\n  // where arguments to `--collectCoverageFrom` should be globs (or relative\n  // paths to the rootDir)\n\n\n  if (newOptions.collectCoverage && argv.findRelatedTests) {\n    let collectCoverageFrom = newOptions.nonFlagArgs.map(filename => {\n      filename = (0, _utils.replaceRootDirInPath)(options.rootDir, filename);\n      return path().isAbsolute(filename) ? path().relative(options.rootDir, filename) : filename;\n    }); // Don't override existing collectCoverageFrom options\n\n    if (newOptions.collectCoverageFrom) {\n      collectCoverageFrom = collectCoverageFrom.reduce((patterns, filename) => {\n        if ((0, _micromatch().default)([(0, _jestUtil().replacePathSepForGlob)(path().relative(options.rootDir, filename))], newOptions.collectCoverageFrom).length === 0) {\n          return patterns;\n        }\n\n        return [...patterns, filename];\n      }, newOptions.collectCoverageFrom);\n    }\n\n    newOptions.collectCoverageFrom = collectCoverageFrom;\n  } else if (!newOptions.collectCoverageFrom) {\n    newOptions.collectCoverageFrom = [];\n  }\n\n  if (!newOptions.findRelatedTests) {\n    newOptions.findRelatedTests = false;\n  }\n\n  if (!newOptions.projects) {\n    newOptions.projects = [];\n  }\n\n  if (!newOptions.sandboxInjectedGlobals) {\n    newOptions.sandboxInjectedGlobals = [];\n  }\n\n  if (!newOptions.forceExit) {\n    newOptions.forceExit = false;\n  }\n\n  if (!newOptions.logHeapUsage) {\n    newOptions.logHeapUsage = false;\n  }\n\n  if (argv.shard) {\n    newOptions.shard = (0, _parseShardPair.parseShardPair)(argv.shard);\n  }\n\n  return {\n    hasDeprecationWarnings,\n    options: newOptions\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","normalize","_crypto","data","require","path","_interopRequireWildcard","_chalk","_interopRequireDefault","_deepmerge","_glob","_gracefulFs","_micromatch","_jestRegexUtil","_jestResolve","_jestUtil","_jestValidate","_Defaults","_Deprecated","_ReporterValidationErrors","_ValidConfig","_color","_constants","_getMaxWorkers","_parseShardPair","_setFromArgv","_utils","_validatePattern","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ERROR","BULLET","PRESET_EXTENSIONS","PRESET_NAME","createConfigError","message","ValidationError","DOCUMENTATION_NOTE","verifyDirectoryExists","rootStat","statSync","isDirectory","bold","err","code","mergeModuleNameMapperWithPreset","options","preset","mergeTransformWithPreset","mergeGlobalsWithPreset","setupPreset","optionsPreset","presetPath","replaceRootDirInPath","rootDir","presetModule","findNodeModule","startsWith","join","basedir","extensions","Error","resolve","requireOrImportModule","error","SyntaxError","TypeError","stack","includes","setupFiles","concat","setupFilesAfterEnv","modulePathIgnorePatterns","setupBabelJest","transform","babelJest","customJSPattern","keys","find","pattern","regex","RegExp","test","customTSPattern","forEach","customTransformer","Array","isArray","DEFAULT_JS_PATTERN","normalizeCollectCoverageOnlyFrom","initialCollectCoverageFrom","collectCoverageOnlyFrom","reduce","map","filePath","create","normalizeCollectCoverageFrom","JSON","parse","replace","normalizeUnmockedModulePathPatterns","replacePathSepForRegex","normalizeMissingOptions","configPath","projectIndex","id","createHash","update","String","digest","substring","normalizeRootDir","tryRealpath","normalizeReporters","reporters","undefined","validateReporters","reporterConfig","normalizedReporterConfig","reporterPath","reporter","ModuleNotFoundError","buildTestPathPattern","argv","patterns","_","push","testPathPattern","replacePosixSep","patternAsString","toString","sep","showTestPathPatternError","clearLine","process","stdout","console","log","red","validateExtensionsToTreatAsEsm","extensionsToTreatAsEsm","length","printConfig","opts","string","ext","extensionWithoutDot","some","initialOptions","Infinity","_options$haste","_argv$_","hasDeprecationWarnings","validate","comment","deprecatedConfig","exampleConfig","recursiveDenylist","testEnvironment","resolveTestEnvironment","requireResolveFunction","roots","testRunner","coverageDirectory","newOptions","resolver","watchman","optionKeys","oldOptions","option","resolveRunner","optional","moduleNameMapper","item","_replaceRootDirTags","transformElement","hasteImplModulePath","resolvedHasteImpl","project","projects","globMatches","sync","replacedRootDirTags","escapeGlobCharacters","replacePathSepForGlob","runner","errorMessage","stringify","bail","displayName","name","color","getDisplayNameColor","watchPlugin","config","resolveWatchPlugin","haste","enableSymlinks","root","i","cwd","testSequencer","resolveSequencer","nonFlagArgs","arg","json","testFailureExitCode","parseInt","lastCommit","changedFilesWithAncestor","changedSince","onlyChanged","all","onlyFailures","watch","watchAll","ci","updateSnapshot","maxConcurrency","maxWorkers","testRegex","testMatch","coverageReporters","filter","collectCoverage","findRelatedTests","collectCoverageFrom","filename","isAbsolute","relative","sandboxInjectedGlobals","forceExit","logHeapUsage","shard","parseShardPair"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/jest-config/build/normalize.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = normalize;\n\nfunction _crypto() {\n  const data = require('crypto');\n\n  _crypto = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _deepmerge() {\n  const data = _interopRequireDefault(require('deepmerge'));\n\n  _deepmerge = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  const data = require('glob');\n\n  _glob = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = require('graceful-fs');\n\n  _gracefulFs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireWildcard(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _ReporterValidationErrors = require('./ReporterValidationErrors');\n\nvar _ValidConfig = _interopRequireDefault(require('./ValidConfig'));\n\nvar _color = require('./color');\n\nvar _constants = require('./constants');\n\nvar _getMaxWorkers = _interopRequireDefault(require('./getMaxWorkers'));\n\nvar _parseShardPair = require('./parseShardPair');\n\nvar _setFromArgv = _interopRequireDefault(require('./setFromArgv'));\n\nvar _utils = require('./utils');\n\nvar _validatePattern = _interopRequireDefault(require('./validatePattern'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst ERROR = `${_utils.BULLET}Validation Error`;\nconst PRESET_EXTENSIONS = ['.json', '.js', '.cjs', '.mjs'];\nconst PRESET_NAME = 'jest-preset';\n\nconst createConfigError = message =>\n  new (_jestValidate().ValidationError)(\n    ERROR,\n    message,\n    _utils.DOCUMENTATION_NOTE\n  );\n\nfunction verifyDirectoryExists(path, key) {\n  try {\n    const rootStat = (0, _gracefulFs().statSync)(path);\n\n    if (!rootStat.isDirectory()) {\n      throw createConfigError(\n        `  ${_chalk().default.bold(path)} in the ${_chalk().default.bold(\n          key\n        )} option is not a directory.`\n      );\n    }\n  } catch (err) {\n    if (err instanceof _jestValidate().ValidationError) {\n      throw err;\n    }\n\n    if (err.code === 'ENOENT') {\n      throw createConfigError(\n        `  Directory ${_chalk().default.bold(\n          path\n        )} in the ${_chalk().default.bold(key)} option was not found.`\n      );\n    } // Not sure in which cases `statSync` can throw, so let's just show the underlying error to the user\n\n    throw createConfigError(\n      `  Got an error trying to find ${_chalk().default.bold(\n        path\n      )} in the ${_chalk().default.bold(key)} option.\\n\\n  Error was: ${\n        err.message\n      }`\n    );\n  }\n} // TS 3.5 forces us to split these into 2\n\nconst mergeModuleNameMapperWithPreset = (options, preset) => {\n  if (options['moduleNameMapper'] && preset['moduleNameMapper']) {\n    options['moduleNameMapper'] = {\n      ...options['moduleNameMapper'],\n      ...preset['moduleNameMapper'],\n      ...options['moduleNameMapper']\n    };\n  }\n};\n\nconst mergeTransformWithPreset = (options, preset) => {\n  if (options['transform'] && preset['transform']) {\n    options['transform'] = {\n      ...options['transform'],\n      ...preset['transform'],\n      ...options['transform']\n    };\n  }\n};\n\nconst mergeGlobalsWithPreset = (options, preset) => {\n  if (options['globals'] && preset['globals']) {\n    options['globals'] = (0, _deepmerge().default)(\n      preset['globals'],\n      options['globals']\n    );\n  }\n};\n\nconst setupPreset = async (options, optionsPreset) => {\n  let preset;\n  const presetPath = (0, _utils.replaceRootDirInPath)(\n    options.rootDir,\n    optionsPreset\n  );\n\n  const presetModule = _jestResolve().default.findNodeModule(\n    presetPath.startsWith('.')\n      ? presetPath\n      : path().join(presetPath, PRESET_NAME),\n    {\n      basedir: options.rootDir,\n      extensions: PRESET_EXTENSIONS\n    }\n  );\n\n  try {\n    if (!presetModule) {\n      throw new Error(`Cannot find module '${presetPath}'`);\n    } // Force re-evaluation to support multiple projects\n\n    try {\n      delete require.cache[require.resolve(presetModule)];\n    } catch {}\n\n    preset = await (0, _jestUtil().requireOrImportModule)(presetModule);\n  } catch (error) {\n    if (error instanceof SyntaxError || error instanceof TypeError) {\n      throw createConfigError(\n        `  Preset ${_chalk().default.bold(presetPath)} is invalid:\\n\\n  ${\n          error.message\n        }\\n  ${error.stack}`\n      );\n    }\n\n    if (error.message.includes('Cannot find module')) {\n      if (error.message.includes(presetPath)) {\n        const preset = _jestResolve().default.findNodeModule(presetPath, {\n          basedir: options.rootDir\n        });\n\n        if (preset) {\n          throw createConfigError(\n            `  Module ${_chalk().default.bold(\n              presetPath\n            )} should have \"jest-preset.js\" or \"jest-preset.json\" file at the root.`\n          );\n        }\n\n        throw createConfigError(\n          `  Preset ${_chalk().default.bold(presetPath)} not found.`\n        );\n      }\n\n      throw createConfigError(\n        `  Missing dependency in ${_chalk().default.bold(presetPath)}:\\n\\n  ${\n          error.message\n        }\\n  ${error.stack}`\n      );\n    }\n\n    throw createConfigError(\n      `  An unknown error occurred in ${_chalk().default.bold(\n        presetPath\n      )}:\\n\\n  ${error.message}\\n  ${error.stack}`\n    );\n  }\n\n  if (options.setupFiles) {\n    options.setupFiles = (preset.setupFiles || []).concat(options.setupFiles);\n  }\n\n  if (options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = (preset.setupFilesAfterEnv || []).concat(\n      options.setupFilesAfterEnv\n    );\n  }\n\n  if (options.modulePathIgnorePatterns && preset.modulePathIgnorePatterns) {\n    options.modulePathIgnorePatterns = preset.modulePathIgnorePatterns.concat(\n      options.modulePathIgnorePatterns\n    );\n  }\n\n  mergeModuleNameMapperWithPreset(options, preset);\n  mergeTransformWithPreset(options, preset);\n  mergeGlobalsWithPreset(options, preset);\n  return {...preset, ...options};\n};\n\nconst setupBabelJest = options => {\n  const transform = options.transform;\n  let babelJest;\n\n  if (transform) {\n    const customJSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.js') || regex.test('a.jsx');\n    });\n    const customTSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.ts') || regex.test('a.tsx');\n    });\n    [customJSPattern, customTSPattern].forEach(pattern => {\n      if (pattern) {\n        const customTransformer = transform[pattern];\n\n        if (Array.isArray(customTransformer)) {\n          if (customTransformer[0] === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            customTransformer[0] = babelJest;\n          } else if (customTransformer[0].includes('babel-jest')) {\n            babelJest = customTransformer[0];\n          }\n        } else {\n          if (customTransformer === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            transform[pattern] = babelJest;\n          } else if (customTransformer.includes('babel-jest')) {\n            babelJest = customTransformer;\n          }\n        }\n      }\n    });\n  } else {\n    babelJest = require.resolve('babel-jest');\n    options.transform = {\n      [_constants.DEFAULT_JS_PATTERN]: babelJest\n    };\n  }\n};\n\nconst normalizeCollectCoverageOnlyFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  const collectCoverageOnlyFrom = Array.isArray(initialCollectCoverageFrom)\n    ? initialCollectCoverageFrom // passed from argv\n    : Object.keys(initialCollectCoverageFrom); // passed from options\n\n  return collectCoverageOnlyFrom.reduce((map, filePath) => {\n    filePath = path().resolve(\n      options.rootDir,\n      (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)\n    );\n    map[filePath] = true;\n    return map;\n  }, Object.create(null));\n};\n\nconst normalizeCollectCoverageFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  let value;\n\n  if (!initialCollectCoverageFrom) {\n    value = [];\n  }\n\n  if (!Array.isArray(initialCollectCoverageFrom)) {\n    try {\n      value = JSON.parse(initialCollectCoverageFrom);\n    } catch {}\n\n    if (options[key] && !Array.isArray(value)) {\n      value = [initialCollectCoverageFrom];\n    }\n  } else {\n    value = initialCollectCoverageFrom;\n  }\n\n  if (value) {\n    value = value.map(filePath =>\n      filePath.replace(/^(!?)(<rootDir>\\/)(.*)/, '$1$3')\n    );\n  }\n\n  return value;\n};\n\nconst normalizeUnmockedModulePathPatterns = (\n  options,\n  key // _replaceRootDirTags is specifically well-suited for substituting\n) =>\n  // <rootDir> in paths (it deals with properly interpreting relative path\n  // separators, etc).\n  //\n  // For patterns, direct global substitution is far more ideal, so we\n  // special case substitutions for patterns here.\n  options[key].map(pattern =>\n    (0, _jestRegexUtil().replacePathSepForRegex)(\n      pattern.replace(/<rootDir>/g, options.rootDir)\n    )\n  );\n\nconst normalizeMissingOptions = (options, configPath, projectIndex) => {\n  if (!options.id) {\n    options.id = (0, _crypto().createHash)('sha256')\n      .update(options.rootDir) // In case we load config from some path that has the same root dir\n      .update(configPath || '')\n      .update(String(projectIndex))\n      .digest('hex')\n      .substring(0, 32);\n  }\n\n  if (!options.setupFiles) {\n    options.setupFiles = [];\n  }\n\n  return options;\n};\n\nconst normalizeRootDir = options => {\n  // Assert that there *is* a rootDir\n  if (!options.rootDir) {\n    throw createConfigError(\n      `  Configuration option ${_chalk().default.bold(\n        'rootDir'\n      )} must be specified.`\n    );\n  }\n\n  options.rootDir = path().normalize(options.rootDir);\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    options.rootDir = (0, _jestUtil().tryRealpath)(options.rootDir);\n  } catch {\n    // ignored\n  }\n\n  verifyDirectoryExists(options.rootDir, 'rootDir');\n  return {...options, rootDir: options.rootDir};\n};\n\nconst normalizeReporters = ({reporters, rootDir}) => {\n  if (!reporters || !Array.isArray(reporters)) {\n    return undefined;\n  }\n\n  (0, _ReporterValidationErrors.validateReporters)(reporters);\n  return reporters.map(reporterConfig => {\n    const normalizedReporterConfig =\n      typeof reporterConfig === 'string' // if reporter config is a string, we wrap it in an array\n        ? // and pass an empty object for options argument, to normalize\n          // the shape.\n          [reporterConfig, {}]\n        : reporterConfig;\n    const reporterPath = (0, _utils.replaceRootDirInPath)(\n      rootDir,\n      normalizedReporterConfig[0]\n    );\n\n    if (!['default', 'github-actions', 'summary'].includes(reporterPath)) {\n      const reporter = _jestResolve().default.findNodeModule(reporterPath, {\n        basedir: rootDir\n      });\n\n      if (!reporter) {\n        throw new (_jestResolve().default.ModuleNotFoundError)(\n          'Could not resolve a module for a custom reporter.\\n' +\n            `  Module name: ${reporterPath}`\n        );\n      }\n\n      normalizedReporterConfig[0] = reporter;\n    }\n\n    return normalizedReporterConfig;\n  });\n};\n\nconst buildTestPathPattern = argv => {\n  const patterns = [];\n\n  if (argv._) {\n    patterns.push(...argv._);\n  }\n\n  if (argv.testPathPattern) {\n    patterns.push(...argv.testPathPattern);\n  }\n\n  const replacePosixSep = pattern => {\n    // yargs coerces positional args into numbers\n    const patternAsString = pattern.toString();\n\n    if (path().sep === '/') {\n      return patternAsString;\n    }\n\n    return patternAsString.replace(/\\//g, '\\\\\\\\');\n  };\n\n  const testPathPattern = patterns.map(replacePosixSep).join('|');\n\n  if ((0, _validatePattern.default)(testPathPattern)) {\n    return testPathPattern;\n  } else {\n    showTestPathPatternError(testPathPattern);\n    return '';\n  }\n};\n\nconst showTestPathPatternError = testPathPattern => {\n  (0, _jestUtil().clearLine)(process.stdout); // eslint-disable-next-line no-console\n\n  console.log(\n    _chalk().default.red(\n      `  Invalid testPattern ${testPathPattern} supplied. ` +\n        'Running all tests instead.'\n    )\n  );\n};\n\nfunction validateExtensionsToTreatAsEsm(extensionsToTreatAsEsm) {\n  if (!extensionsToTreatAsEsm || extensionsToTreatAsEsm.length === 0) {\n    return;\n  }\n\n  function printConfig(opts) {\n    const string = opts.map(ext => `'${ext}'`).join(', ');\n    return _chalk().default.bold(`extensionsToTreatAsEsm: [${string}]`);\n  }\n\n  const extensionWithoutDot = extensionsToTreatAsEsm.some(\n    ext => !ext.startsWith('.')\n  );\n\n  if (extensionWithoutDot) {\n    throw createConfigError(`  Option: ${printConfig(\n      extensionsToTreatAsEsm\n    )} includes a string that does not start with a period (${_chalk().default.bold(\n      '.'\n    )}).\n  Please change your configuration to ${printConfig(\n    extensionsToTreatAsEsm.map(ext => (ext.startsWith('.') ? ext : `.${ext}`))\n  )}.`);\n  }\n\n  if (extensionsToTreatAsEsm.includes('.js')) {\n    throw createConfigError(\n      `  Option: ${printConfig(\n        extensionsToTreatAsEsm\n      )} includes ${_chalk().default.bold(\n        \"'.js'\"\n      )} which is always inferred based on ${_chalk().default.bold(\n        'type'\n      )} in its nearest ${_chalk().default.bold('package.json')}.`\n    );\n  }\n\n  if (extensionsToTreatAsEsm.includes('.cjs')) {\n    throw createConfigError(\n      `  Option: ${printConfig(\n        extensionsToTreatAsEsm\n      )} includes ${_chalk().default.bold(\n        \"'.cjs'\"\n      )} which is always treated as CommonJS.`\n    );\n  }\n\n  if (extensionsToTreatAsEsm.includes('.mjs')) {\n    throw createConfigError(\n      `  Option: ${printConfig(\n        extensionsToTreatAsEsm\n      )} includes ${_chalk().default.bold(\n        \"'.mjs'\"\n      )} which is always treated as an ECMAScript Module.`\n    );\n  }\n}\n\nasync function normalize(\n  initialOptions,\n  argv,\n  configPath,\n  projectIndex = Infinity\n) {\n  var _options$haste, _argv$_;\n\n  const {hasDeprecationWarnings} = (0, _jestValidate().validate)(\n    initialOptions,\n    {\n      comment: _utils.DOCUMENTATION_NOTE,\n      deprecatedConfig: _Deprecated.default,\n      exampleConfig: _ValidConfig.default,\n      recursiveDenylist: [\n        'collectCoverageOnlyFrom', // 'coverageThreshold' allows to use 'global' and glob strings on the same\n        // level, there's currently no way we can deal with such config\n        'coverageThreshold',\n        'globals',\n        'moduleNameMapper',\n        'testEnvironmentOptions',\n        'transform'\n      ]\n    }\n  );\n  let options = normalizeMissingOptions(\n    normalizeRootDir((0, _setFromArgv.default)(initialOptions, argv)),\n    configPath,\n    projectIndex\n  );\n\n  if (options.preset) {\n    options = await setupPreset(options, options.preset);\n  }\n\n  if (!options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = [];\n  }\n\n  options.testEnvironment = (0, _jestResolve().resolveTestEnvironment)({\n    requireResolveFunction: require.resolve,\n    rootDir: options.rootDir,\n    testEnvironment:\n      options.testEnvironment ||\n      require.resolve(_Defaults.default.testEnvironment)\n  });\n\n  if (!options.roots) {\n    options.roots = [options.rootDir];\n  }\n\n  if (\n    !options.testRunner ||\n    options.testRunner === 'circus' ||\n    options.testRunner === 'jest-circus' ||\n    options.testRunner === 'jest-circus/runner'\n  ) {\n    options.testRunner = require.resolve('jest-circus/runner');\n  } else if (options.testRunner === 'jasmine2') {\n    try {\n      options.testRunner = require.resolve('jest-jasmine2');\n    } catch (error) {\n      if (error.code === 'MODULE_NOT_FOUND') {\n        throw createConfigError(\n          'jest-jasmine is no longer shipped by default with Jest, you need to install it explicitly or provide an absolute path to Jest'\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  if (!options.coverageDirectory) {\n    options.coverageDirectory = path().resolve(options.rootDir, 'coverage');\n  }\n\n  setupBabelJest(options); // TODO: Type this properly\n\n  const newOptions = {..._Defaults.default};\n\n  if (options.resolver) {\n    newOptions.resolver = (0, _utils.resolve)(null, {\n      filePath: options.resolver,\n      key: 'resolver',\n      rootDir: options.rootDir\n    });\n  }\n\n  validateExtensionsToTreatAsEsm(options.extensionsToTreatAsEsm);\n\n  if (options.watchman == null) {\n    options.watchman = _Defaults.default.watchman;\n  }\n\n  const optionKeys = Object.keys(options);\n  optionKeys.reduce((newOptions, key) => {\n    // The resolver has been resolved separately; skip it\n    if (key === 'resolver') {\n      return newOptions;\n    } // This is cheating, because it claims that all keys of InitialOptions are Required.\n    // We only really know it's Required for oldOptions[key], not for oldOptions.someOtherKey,\n    // so oldOptions[key] is the only way it should be used.\n\n    const oldOptions = options;\n    let value;\n\n    switch (key) {\n      case 'collectCoverageOnlyFrom':\n        value = normalizeCollectCoverageOnlyFrom(oldOptions, key);\n        break;\n\n      case 'setupFiles':\n      case 'setupFilesAfterEnv':\n      case 'snapshotSerializers':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            option.map(filePath =>\n              (0, _utils.resolve)(newOptions.resolver, {\n                filePath,\n                key,\n                rootDir: options.rootDir\n              })\n            );\n        }\n        break;\n\n      case 'modulePaths':\n      case 'roots':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            option.map(filePath =>\n              path().resolve(\n                options.rootDir,\n                (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)\n              )\n            );\n        }\n        break;\n\n      case 'collectCoverageFrom':\n        value = normalizeCollectCoverageFrom(oldOptions, key);\n        break;\n\n      case 'cacheDirectory':\n      case 'coverageDirectory':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            path().resolve(\n              options.rootDir,\n              (0, _utils.replaceRootDirInPath)(options.rootDir, option)\n            );\n        }\n        break;\n\n      case 'dependencyExtractor':\n      case 'globalSetup':\n      case 'globalTeardown':\n      case 'runtime':\n      case 'snapshotResolver':\n      case 'testResultsProcessor':\n      case 'testRunner':\n      case 'filter':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _utils.resolve)(newOptions.resolver, {\n              filePath: option,\n              key,\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'runner':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _jestResolve().resolveRunner)(newOptions.resolver, {\n              filePath: option,\n              requireResolveFunction: require.resolve,\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'prettierPath':\n        {\n          // We only want this to throw if \"prettierPath\" is explicitly passed\n          // from config or CLI, and the requested path isn't found. Otherwise we\n          // set it to null and throw an error lazily when it is used.\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _utils.resolve)(newOptions.resolver, {\n              filePath: option,\n              key,\n              optional: option === _Defaults.default[key],\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'moduleNameMapper':\n        const moduleNameMapper = oldOptions[key];\n        value =\n          moduleNameMapper &&\n          Object.keys(moduleNameMapper).map(regex => {\n            const item = moduleNameMapper && moduleNameMapper[regex];\n            return (\n              item && [\n                regex,\n                (0, _utils._replaceRootDirTags)(options.rootDir, item)\n              ]\n            );\n          });\n        break;\n\n      case 'transform':\n        const transform = oldOptions[key];\n        value =\n          transform &&\n          Object.keys(transform).map(regex => {\n            const transformElement = transform[regex];\n            return [\n              regex,\n              (0, _utils.resolve)(newOptions.resolver, {\n                filePath: Array.isArray(transformElement)\n                  ? transformElement[0]\n                  : transformElement,\n                key,\n                rootDir: options.rootDir\n              }),\n              Array.isArray(transformElement) ? transformElement[1] : {}\n            ];\n          });\n        break;\n\n      case 'reporters':\n        value = normalizeReporters(oldOptions);\n        break;\n\n      case 'coveragePathIgnorePatterns':\n      case 'modulePathIgnorePatterns':\n      case 'testPathIgnorePatterns':\n      case 'transformIgnorePatterns':\n      case 'watchPathIgnorePatterns':\n      case 'unmockedModulePathPatterns':\n        value = normalizeUnmockedModulePathPatterns(oldOptions, key);\n        break;\n\n      case 'haste':\n        value = {...oldOptions[key]};\n\n        if (value.hasteImplModulePath != null) {\n          const resolvedHasteImpl = (0, _utils.resolve)(newOptions.resolver, {\n            filePath: (0, _utils.replaceRootDirInPath)(\n              options.rootDir,\n              value.hasteImplModulePath\n            ),\n            key: 'haste.hasteImplModulePath',\n            rootDir: options.rootDir\n          });\n          value.hasteImplModulePath = resolvedHasteImpl || undefined;\n        }\n\n        break;\n\n      case 'projects':\n        value = (oldOptions[key] || [])\n          .map(project =>\n            typeof project === 'string'\n              ? (0, _utils._replaceRootDirTags)(options.rootDir, project)\n              : project\n          )\n          .reduce((projects, project) => {\n            // Project can be specified as globs. If a glob matches any files,\n            // We expand it to these paths. If not, we keep the original path\n            // for the future resolution.\n            const globMatches =\n              typeof project === 'string' ? (0, _glob().sync)(project) : [];\n            return projects.concat(globMatches.length ? globMatches : project);\n          }, []);\n        break;\n\n      case 'moduleDirectories':\n      case 'testMatch':\n        {\n          const replacedRootDirTags = (0, _utils._replaceRootDirTags)(\n            (0, _utils.escapeGlobCharacters)(options.rootDir),\n            oldOptions[key]\n          );\n\n          if (replacedRootDirTags) {\n            value = Array.isArray(replacedRootDirTags)\n              ? replacedRootDirTags.map(_jestUtil().replacePathSepForGlob)\n              : (0, _jestUtil().replacePathSepForGlob)(replacedRootDirTags);\n          } else {\n            value = replacedRootDirTags;\n          }\n        }\n        break;\n\n      case 'testRegex':\n        {\n          const option = oldOptions[key];\n          value = option\n            ? (Array.isArray(option) ? option : [option]).map(\n                _jestRegexUtil().replacePathSepForRegex\n              )\n            : [];\n        }\n        break;\n\n      case 'moduleFileExtensions': {\n        value = oldOptions[key];\n\n        if (\n          Array.isArray(value) && // If it's the wrong type, it can throw at a later time\n          (options.runner === undefined ||\n            options.runner === _Defaults.default.runner) && // Only require 'js' for the default jest-runner\n          !value.includes('js')\n        ) {\n          const errorMessage =\n            \"  moduleFileExtensions must include 'js':\\n\" +\n            '  but instead received:\\n' +\n            `    ${_chalk().default.bold.red(JSON.stringify(value))}`; // If `js` is not included, any dependency Jest itself injects into\n          // the environment, like jasmine or sourcemap-support, will need to\n          // `require` its modules with a file extension. This is not plausible\n          // in the long run, so it's way easier to just fail hard early.\n          // We might consider throwing if `json` is missing as well, as it's a\n          // fair assumption from modules that they can do\n          // `require('some-package/package') without the trailing `.json` as it\n          // works in Node normally.\n\n          throw createConfigError(\n            `${errorMessage}\\n  Please change your configuration to include 'js'.`\n          );\n        }\n\n        break;\n      }\n\n      case 'bail': {\n        const bail = oldOptions[key];\n\n        if (typeof bail === 'boolean') {\n          value = bail ? 1 : 0;\n        } else if (typeof bail === 'string') {\n          value = 1; // If Jest is invoked as `jest --bail someTestPattern` then need to\n          // move the pattern from the `bail` configuration and into `argv._`\n          // to be processed as an extra parameter\n\n          argv._.push(bail);\n        } else {\n          value = oldOptions[key];\n        }\n\n        break;\n      }\n\n      case 'displayName': {\n        const displayName = oldOptions[key];\n        /**\n         * Ensuring that displayName shape is correct here so that the\n         * reporters can trust the shape of the data\n         */\n\n        if (typeof displayName === 'object') {\n          const {name, color} = displayName;\n\n          if (\n            !name ||\n            !color ||\n            typeof name !== 'string' ||\n            typeof color !== 'string'\n          ) {\n            const errorMessage =\n              `  Option \"${_chalk().default.bold(\n                'displayName'\n              )}\" must be of type:\\n\\n` +\n              '  {\\n' +\n              '    name: string;\\n' +\n              '    color: string;\\n' +\n              '  }\\n';\n            throw createConfigError(errorMessage);\n          }\n\n          value = oldOptions[key];\n        } else {\n          value = {\n            color: (0, _color.getDisplayNameColor)(options.runner),\n            name: displayName\n          };\n        }\n\n        break;\n      }\n\n      case 'testTimeout': {\n        if (oldOptions[key] < 0) {\n          throw createConfigError(\n            `  Option \"${_chalk().default.bold(\n              'testTimeout'\n            )}\" must be a natural number.`\n          );\n        }\n\n        value = oldOptions[key];\n        break;\n      }\n\n      case 'automock':\n      case 'cache':\n      case 'changedSince':\n      case 'changedFilesWithAncestor':\n      case 'clearMocks':\n      case 'collectCoverage':\n      case 'coverageProvider':\n      case 'coverageReporters':\n      case 'coverageThreshold':\n      case 'detectLeaks':\n      case 'detectOpenHandles':\n      case 'errorOnDeprecated':\n      case 'expand':\n      case 'extensionsToTreatAsEsm':\n      case 'globals':\n      case 'fakeTimers':\n      case 'findRelatedTests':\n      case 'forceCoverageMatch':\n      case 'forceExit':\n      case 'injectGlobals':\n      case 'lastCommit':\n      case 'listTests':\n      case 'logHeapUsage':\n      case 'maxConcurrency':\n      case 'id':\n      case 'noStackTrace':\n      case 'notify':\n      case 'notifyMode':\n      case 'onlyChanged':\n      case 'onlyFailures':\n      case 'outputFile':\n      case 'passWithNoTests':\n      case 'replname':\n      case 'resetMocks':\n      case 'resetModules':\n      case 'restoreMocks':\n      case 'rootDir':\n      case 'runTestsByPath':\n      case 'sandboxInjectedGlobals':\n      case 'silent':\n      case 'skipFilter':\n      case 'skipNodeResolution':\n      case 'slowTestThreshold':\n      case 'snapshotFormat':\n      case 'testEnvironment':\n      case 'testEnvironmentOptions':\n      case 'testFailureExitCode':\n      case 'testLocationInResults':\n      case 'testNamePattern':\n      case 'useStderr':\n      case 'verbose':\n      case 'watch':\n      case 'watchAll':\n      case 'watchman':\n        value = oldOptions[key];\n        break;\n\n      case 'watchPlugins':\n        value = (oldOptions[key] || []).map(watchPlugin => {\n          if (typeof watchPlugin === 'string') {\n            return {\n              config: {},\n              path: (0, _jestResolve().resolveWatchPlugin)(\n                newOptions.resolver,\n                {\n                  filePath: watchPlugin,\n                  requireResolveFunction: require.resolve,\n                  rootDir: options.rootDir\n                }\n              )\n            };\n          } else {\n            return {\n              config: watchPlugin[1] || {},\n              path: (0, _jestResolve().resolveWatchPlugin)(\n                newOptions.resolver,\n                {\n                  filePath: watchPlugin[0],\n                  requireResolveFunction: require.resolve,\n                  rootDir: options.rootDir\n                }\n              )\n            };\n          }\n        });\n        break;\n    } // @ts-expect-error: automock is missing in GlobalConfig, so what\n\n    newOptions[key] = value;\n    return newOptions;\n  }, newOptions);\n\n  if (\n    options.watchman &&\n    (_options$haste = options.haste) !== null &&\n    _options$haste !== void 0 &&\n    _options$haste.enableSymlinks\n  ) {\n    throw new (_jestValidate().ValidationError)(\n      'Validation Error',\n      'haste.enableSymlinks is incompatible with watchman',\n      'Either set haste.enableSymlinks to false or do not use watchman'\n    );\n  }\n\n  newOptions.roots.forEach((root, i) => {\n    verifyDirectoryExists(root, `roots[${i}]`);\n  });\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    newOptions.cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n  } catch {\n    // ignored\n  }\n\n  newOptions.testSequencer = (0, _jestResolve().resolveSequencer)(\n    newOptions.resolver,\n    {\n      filePath:\n        options.testSequencer ||\n        require.resolve(_Defaults.default.testSequencer),\n      requireResolveFunction: require.resolve,\n      rootDir: options.rootDir\n    }\n  );\n\n  if (newOptions.runner === _Defaults.default.runner) {\n    newOptions.runner = require.resolve(newOptions.runner);\n  }\n\n  newOptions.nonFlagArgs =\n    (_argv$_ = argv._) === null || _argv$_ === void 0\n      ? void 0\n      : _argv$_.map(arg => `${arg}`);\n  newOptions.testPathPattern = buildTestPathPattern(argv);\n  newOptions.json = !!argv.json;\n  newOptions.testFailureExitCode = parseInt(newOptions.testFailureExitCode, 10);\n\n  if (\n    newOptions.lastCommit ||\n    newOptions.changedFilesWithAncestor ||\n    newOptions.changedSince\n  ) {\n    newOptions.onlyChanged = true;\n  }\n\n  if (argv.all) {\n    newOptions.onlyChanged = false;\n    newOptions.onlyFailures = false;\n  } else if (newOptions.testPathPattern) {\n    // When passing a test path pattern we don't want to only monitor changed\n    // files unless `--watch` is also passed.\n    newOptions.onlyChanged = newOptions.watch;\n  }\n\n  if (!newOptions.onlyChanged) {\n    newOptions.onlyChanged = false;\n  }\n\n  if (!newOptions.lastCommit) {\n    newOptions.lastCommit = false;\n  }\n\n  if (!newOptions.onlyFailures) {\n    newOptions.onlyFailures = false;\n  }\n\n  if (!newOptions.watchAll) {\n    newOptions.watchAll = false;\n  } // as unknown since it can happen. We really need to fix the types here\n\n  if (newOptions.moduleNameMapper === _Defaults.default.moduleNameMapper) {\n    newOptions.moduleNameMapper = [];\n  }\n\n  if (argv.ci != null) {\n    newOptions.ci = argv.ci;\n  }\n\n  newOptions.updateSnapshot =\n    newOptions.ci && !argv.updateSnapshot\n      ? 'none'\n      : argv.updateSnapshot\n      ? 'all'\n      : 'new';\n  newOptions.maxConcurrency = parseInt(newOptions.maxConcurrency, 10);\n  newOptions.maxWorkers = (0, _getMaxWorkers.default)(argv, options);\n\n  if (newOptions.testRegex.length && options.testMatch) {\n    throw createConfigError(\n      `  Configuration options ${_chalk().default.bold('testMatch')} and` +\n        ` ${_chalk().default.bold('testRegex')} cannot be used together.`\n    );\n  }\n\n  if (newOptions.testRegex.length && !options.testMatch) {\n    // Prevent the default testMatch conflicting with any explicitly\n    // configured `testRegex` value\n    newOptions.testMatch = [];\n  } // If argv.json is set, coverageReporters shouldn't print a text report.\n\n  if (argv.json) {\n    newOptions.coverageReporters = (newOptions.coverageReporters || []).filter(\n      reporter => reporter !== 'text'\n    );\n  } // If collectCoverage is enabled while using --findRelatedTests we need to\n  // avoid having false negatives in the generated coverage report.\n  // The following: `--findRelatedTests '/rootDir/file1.js' --coverage`\n  // Is transformed to: `--findRelatedTests '/rootDir/file1.js' --coverage --collectCoverageFrom 'file1.js'`\n  // where arguments to `--collectCoverageFrom` should be globs (or relative\n  // paths to the rootDir)\n\n  if (newOptions.collectCoverage && argv.findRelatedTests) {\n    let collectCoverageFrom = newOptions.nonFlagArgs.map(filename => {\n      filename = (0, _utils.replaceRootDirInPath)(options.rootDir, filename);\n      return path().isAbsolute(filename)\n        ? path().relative(options.rootDir, filename)\n        : filename;\n    }); // Don't override existing collectCoverageFrom options\n\n    if (newOptions.collectCoverageFrom) {\n      collectCoverageFrom = collectCoverageFrom.reduce((patterns, filename) => {\n        if (\n          (0, _micromatch().default)(\n            [\n              (0, _jestUtil().replacePathSepForGlob)(\n                path().relative(options.rootDir, filename)\n              )\n            ],\n            newOptions.collectCoverageFrom\n          ).length === 0\n        ) {\n          return patterns;\n        }\n\n        return [...patterns, filename];\n      }, newOptions.collectCoverageFrom);\n    }\n\n    newOptions.collectCoverageFrom = collectCoverageFrom;\n  } else if (!newOptions.collectCoverageFrom) {\n    newOptions.collectCoverageFrom = [];\n  }\n\n  if (!newOptions.findRelatedTests) {\n    newOptions.findRelatedTests = false;\n  }\n\n  if (!newOptions.projects) {\n    newOptions.projects = [];\n  }\n\n  if (!newOptions.sandboxInjectedGlobals) {\n    newOptions.sandboxInjectedGlobals = [];\n  }\n\n  if (!newOptions.forceExit) {\n    newOptions.forceExit = false;\n  }\n\n  if (!newOptions.logHeapUsage) {\n    newOptions.logHeapUsage = false;\n  }\n\n  if (argv.shard) {\n    newOptions.shard = (0, _parseShardPair.parseShardPair)(argv.shard);\n  }\n\n  return {\n    hasDeprecationWarnings,\n    options: newOptions\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}