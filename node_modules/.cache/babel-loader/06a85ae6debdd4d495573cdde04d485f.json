{"ast":null,"code":"'use strict';\n\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const queue = new Queue();\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n\n  const run = async function (fn, resolve) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    activeCount++;\n\n    const result = (async () => fn(...args))();\n\n    resolve(result);\n\n    try {\n      await result;\n    } catch {}\n\n    next();\n  };\n\n  const enqueue = function (fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    queue.enqueue(run.bind(null, fn, resolve, ...args));\n\n    (async () => {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      await Promise.resolve();\n\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n\n  const generator = function (fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise(resolve => {\n      enqueue(fn, resolve, ...args);\n    });\n  };\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;","map":{"version":3,"names":["Queue","require","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","args","result","enqueue","bind","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear","module","exports"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/p-limit/index.js"],"sourcesContent":["'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"],"mappings":"AAAA;;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAMC,MAAM,GAAGC,WAAW,IAAI;EAC7B,IAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;IACtF,MAAM,IAAII,SAAJ,CAAc,qDAAd,CAAN;EACA;;EAED,MAAMC,KAAK,GAAG,IAAIR,KAAJ,EAAd;EACA,IAAIS,WAAW,GAAG,CAAlB;;EAEA,MAAMC,IAAI,GAAG,MAAM;IAClBD,WAAW;;IAEX,IAAID,KAAK,CAACG,IAAN,GAAa,CAAjB,EAAoB;MACnBH,KAAK,CAACI,OAAN;IACA;EACD,CAND;;EAQA,MAAMC,GAAG,GAAG,gBAAOC,EAAP,EAAWC,OAAX,EAAgC;IAAA,kCAATC,IAAS;MAATA,IAAS;IAAA;;IAC3CP,WAAW;;IAEX,MAAMQ,MAAM,GAAG,CAAC,YAAYH,EAAE,CAAC,GAAGE,IAAJ,CAAf,GAAf;;IAEAD,OAAO,CAACE,MAAD,CAAP;;IAEA,IAAI;MACH,MAAMA,MAAN;IACA,CAFD,CAEE,MAAM,CAAE;;IAEVP,IAAI;EACJ,CAZD;;EAcA,MAAMQ,OAAO,GAAG,UAACJ,EAAD,EAAKC,OAAL,EAA0B;IAAA,mCAATC,IAAS;MAATA,IAAS;IAAA;;IACzCR,KAAK,CAACU,OAAN,CAAcL,GAAG,CAACM,IAAJ,CAAS,IAAT,EAAeL,EAAf,EAAmBC,OAAnB,EAA4B,GAAGC,IAA/B,CAAd;;IAEA,CAAC,YAAY;MACZ;MACA;MACA;MACA;MACA,MAAMI,OAAO,CAACL,OAAR,EAAN;;MAEA,IAAIN,WAAW,GAAGN,WAAd,IAA6BK,KAAK,CAACG,IAAN,GAAa,CAA9C,EAAiD;QAChDH,KAAK,CAACI,OAAN;MACA;IACD,CAVD;EAWA,CAdD;;EAgBA,MAAMS,SAAS,GAAG,UAACP,EAAD;IAAA,mCAAQE,IAAR;MAAQA,IAAR;IAAA;;IAAA,OAAiB,IAAII,OAAJ,CAAYL,OAAO,IAAI;MACzDG,OAAO,CAACJ,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,CAAP;IACA,CAFkC,CAAjB;EAAA,CAAlB;;EAIAM,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;IAClCZ,WAAW,EAAE;MACZe,GAAG,EAAE,MAAMf;IADC,CADqB;IAIlCgB,YAAY,EAAE;MACbD,GAAG,EAAE,MAAMhB,KAAK,CAACG;IADJ,CAJoB;IAOlCe,UAAU,EAAE;MACXC,KAAK,EAAE,MAAM;QACZnB,KAAK,CAACoB,KAAN;MACA;IAHU;EAPsB,CAAnC;EAcA,OAAOP,SAAP;AACA,CAjED;;AAmEAQ,MAAM,CAACC,OAAP,GAAiB5B,MAAjB"},"metadata":{},"sourceType":"script"}