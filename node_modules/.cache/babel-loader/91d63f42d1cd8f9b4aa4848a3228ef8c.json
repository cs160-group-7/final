{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _jestMatchersObject = require('./jestMatchersObject');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nconst resetAssertionsLocalState = () => {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\n\nconst extractExpectedAssertionsErrors = () => {\n  const result = [];\n  const {\n    assertionCalls,\n    expectedAssertionsNumber,\n    expectedAssertionsNumberError,\n    isExpectingAssertions,\n    isExpectingAssertionsError\n  } = (0, _jestMatchersObject.getState)();\n  resetAssertionsLocalState();\n\n  if (typeof expectedAssertionsNumber === 'number' && assertionCalls !== expectedAssertionsNumber) {\n    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber));\n    expectedAssertionsNumberError.message = `${(0, _jestMatcherUtils.matcherHint)('.assertions', '', expectedAssertionsNumber.toString(), {\n      isDirectExpectCall: true\n    })}\\n\\n` + `Expected ${numOfAssertionsExpected} to be called but received ${(0, _jestMatcherUtils.RECEIVED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0))}.`;\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n\n  if (isExpectingAssertions && assertionCalls === 0) {\n    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)('at least one assertion');\n    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message = `${(0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {\n      isDirectExpectCall: true\n    })}\\n\\nExpected ${expected} to be called but ${received}.`;\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n\n  return result;\n};\n\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_jestMatcherUtils","require","_jestMatchersObject","resetAssertionsLocalState","setState","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","extractExpectedAssertionsErrors","result","expectedAssertionsNumberError","isExpectingAssertionsError","getState","numOfAssertionsExpected","EXPECTED_COLOR","pluralize","message","matcherHint","toString","isDirectExpectCall","RECEIVED_COLOR","push","actual","error","expected","received","_default"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/expect/build/extractExpectedAssertionsErrors.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _jestMatchersObject = require('./jestMatchersObject');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst resetAssertionsLocalState = () => {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\nconst extractExpectedAssertionsErrors = () => {\n  const result = [];\n  const {\n    assertionCalls,\n    expectedAssertionsNumber,\n    expectedAssertionsNumberError,\n    isExpectingAssertions,\n    isExpectingAssertionsError\n  } = (0, _jestMatchersObject.getState)();\n  resetAssertionsLocalState();\n\n  if (\n    typeof expectedAssertionsNumber === 'number' &&\n    assertionCalls !== expectedAssertionsNumber\n  ) {\n    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      (0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber)\n    );\n    expectedAssertionsNumberError.message =\n      `${(0, _jestMatcherUtils.matcherHint)(\n        '.assertions',\n        '',\n        expectedAssertionsNumber.toString(),\n        {\n          isDirectExpectCall: true\n        }\n      )}\\n\\n` +\n      `Expected ${numOfAssertionsExpected} to be called but received ${(0,\n      _jestMatcherUtils.RECEIVED_COLOR)(\n        (0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)\n      )}.`;\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n\n  if (isExpectingAssertions && assertionCalls === 0) {\n    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      'at least one assertion'\n    );\n    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message = `${(0, _jestMatcherUtils.matcherHint)(\n      '.hasAssertions',\n      '',\n      '',\n      {\n        isDirectExpectCall: true\n      }\n    )}\\n\\nExpected ${expected} to be called but ${received}.`;\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n\n  return result;\n};\n\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,sBAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,yBAAyB,GAAG,MAAM;EACtC,CAAC,GAAGD,mBAAmB,CAACE,QAAxB,EAAkC;IAChCC,cAAc,EAAE,CADgB;IAEhCC,wBAAwB,EAAE,IAFM;IAGhCC,qBAAqB,EAAE;EAHS,CAAlC;AAKD,CAND,C,CAMG;AACH;;;AAEA,MAAMC,+BAA+B,GAAG,MAAM;EAC5C,MAAMC,MAAM,GAAG,EAAf;EACA,MAAM;IACJJ,cADI;IAEJC,wBAFI;IAGJI,6BAHI;IAIJH,qBAJI;IAKJI;EALI,IAMF,CAAC,GAAGT,mBAAmB,CAACU,QAAxB,GANJ;EAOAT,yBAAyB;;EAEzB,IACE,OAAOG,wBAAP,KAAoC,QAApC,IACAD,cAAc,KAAKC,wBAFrB,EAGE;IACA,MAAMO,uBAAuB,GAAG,CAAC,GAAGb,iBAAiB,CAACc,cAAtB,EAC9B,CAAC,GAAGd,iBAAiB,CAACe,SAAtB,EAAiC,WAAjC,EAA8CT,wBAA9C,CAD8B,CAAhC;IAGAI,6BAA6B,CAACM,OAA9B,GACG,GAAE,CAAC,GAAGhB,iBAAiB,CAACiB,WAAtB,EACD,aADC,EAED,EAFC,EAGDX,wBAAwB,CAACY,QAAzB,EAHC,EAID;MACEC,kBAAkB,EAAE;IADtB,CAJC,CAOD,MAPF,GAQC,YAAWN,uBAAwB,8BAA6B,CAAC,GAClEb,iBAAiB,CAACoB,cAD+C,EAE/D,CAAC,GAAGpB,iBAAiB,CAACe,SAAtB,EAAiC,gBAAjC,EAAmDV,cAAc,IAAI,CAArE,CAF+D,CAG/D,GAZJ;IAaAI,MAAM,CAACY,IAAP,CAAY;MACVC,MAAM,EAAEjB,cAAc,CAACa,QAAf,EADE;MAEVK,KAAK,EAAEb,6BAFG;MAGVc,QAAQ,EAAElB,wBAAwB,CAACY,QAAzB;IAHA,CAAZ;EAKD;;EAED,IAAIX,qBAAqB,IAAIF,cAAc,KAAK,CAAhD,EAAmD;IACjD,MAAMmB,QAAQ,GAAG,CAAC,GAAGxB,iBAAiB,CAACc,cAAtB,EACf,wBADe,CAAjB;IAGA,MAAMW,QAAQ,GAAG,CAAC,GAAGzB,iBAAiB,CAACoB,cAAtB,EAAsC,eAAtC,CAAjB;IACAT,0BAA0B,CAACK,OAA3B,GAAsC,GAAE,CAAC,GAAGhB,iBAAiB,CAACiB,WAAtB,EACtC,gBADsC,EAEtC,EAFsC,EAGtC,EAHsC,EAItC;MACEE,kBAAkB,EAAE;IADtB,CAJsC,CAOtC,gBAAeK,QAAS,qBAAoBC,QAAS,GAPvD;IAQAhB,MAAM,CAACY,IAAP,CAAY;MACVC,MAAM,EAAE,MADE;MAEVC,KAAK,EAAEZ,0BAFG;MAGVa,QAAQ,EAAE;IAHA,CAAZ;EAKD;;EAED,OAAOf,MAAP;AACD,CA3DD;;AA6DA,IAAIiB,QAAQ,GAAGlB,+BAAf;AACAX,OAAO,CAACE,OAAR,GAAkB2B,QAAlB"},"metadata":{},"sourceType":"script"}