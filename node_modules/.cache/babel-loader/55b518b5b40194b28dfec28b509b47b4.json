{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst descriptions = {\n  automock: 'All imported modules in your tests should be mocked automatically',\n  bail: 'Stop running tests after `n` failures',\n  cacheDirectory: 'The directory where Jest should store its cached dependency information',\n  clearMocks: 'Automatically clear mock calls, instances, contexts and results before every test',\n  collectCoverage: 'Indicates whether the coverage information should be collected while executing the test',\n  collectCoverageFrom: 'An array of glob patterns indicating a set of files for which coverage information should be collected',\n  coverageDirectory: 'The directory where Jest should output its coverage files',\n  coveragePathIgnorePatterns: 'An array of regexp pattern strings used to skip coverage collection',\n  coverageProvider: 'Indicates which provider should be used to instrument code for coverage',\n  coverageReporters: 'A list of reporter names that Jest uses when writing coverage reports',\n  coverageThreshold: 'An object that configures minimum threshold enforcement for coverage results',\n  dependencyExtractor: 'A path to a custom dependency extractor',\n  errorOnDeprecated: 'Make calling deprecated APIs throw helpful error messages',\n  fakeTimers: 'The default configuration for fake timers',\n  forceCoverageMatch: 'Force coverage collection from ignored files using an array of glob patterns',\n  globalSetup: 'A path to a module which exports an async function that is triggered once before all test suites',\n  globalTeardown: 'A path to a module which exports an async function that is triggered once after all test suites',\n  globals: 'A set of global variables that need to be available in all test environments',\n  maxWorkers: 'The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.',\n  moduleDirectories: \"An array of directory names to be searched recursively up from the requiring module's location\",\n  moduleFileExtensions: 'An array of file extensions your modules use',\n  moduleNameMapper: 'A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module',\n  modulePathIgnorePatterns: \"An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\",\n  notify: 'Activates notifications for test results',\n  notifyMode: 'An enum that specifies notification mode. Requires { notify: true }',\n  preset: \"A preset that is used as a base for Jest's configuration\",\n  projects: 'Run tests from one or more projects',\n  reporters: 'Use this configuration option to add custom reporters to Jest',\n  resetMocks: 'Automatically reset mock state before every test',\n  resetModules: 'Reset the module registry before running each individual test',\n  resolver: 'A path to a custom resolver',\n  restoreMocks: 'Automatically restore mock state and implementation before every test',\n  rootDir: 'The root directory that Jest should scan for tests and modules within',\n  roots: 'A list of paths to directories that Jest should use to search for files in',\n  runner: \"Allows you to use a custom runner instead of Jest's default test runner\",\n  setupFiles: 'The paths to modules that run some code to configure or set up the testing environment before each test',\n  setupFilesAfterEnv: 'A list of paths to modules that run some code to configure or set up the testing framework before each test',\n  slowTestThreshold: 'The number of seconds after which a test is considered as slow and reported as such in the results.',\n  snapshotSerializers: 'A list of paths to snapshot serializer modules Jest should use for snapshot testing',\n  testEnvironment: 'The test environment that will be used for testing',\n  testEnvironmentOptions: 'Options that will be passed to the testEnvironment',\n  testLocationInResults: 'Adds a location field to test results',\n  testMatch: 'The glob patterns Jest uses to detect test files',\n  testPathIgnorePatterns: 'An array of regexp pattern strings that are matched against all test paths, matched tests are skipped',\n  testRegex: 'The regexp pattern or array of patterns that Jest uses to detect test files',\n  testResultsProcessor: 'This option allows the use of a custom results processor',\n  testRunner: 'This option allows use of a custom test runner',\n  transform: 'A map from regular expressions to paths to transformers',\n  transformIgnorePatterns: 'An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation',\n  unmockedModulePathPatterns: 'An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them',\n  verbose: 'Indicates whether each individual test should be reported during the run',\n  watchPathIgnorePatterns: 'An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode',\n  watchman: 'Whether to use watchman for file crawling'\n};\nvar _default = descriptions;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","descriptions","automock","bail","cacheDirectory","clearMocks","collectCoverage","collectCoverageFrom","coverageDirectory","coveragePathIgnorePatterns","coverageProvider","coverageReporters","coverageThreshold","dependencyExtractor","errorOnDeprecated","fakeTimers","forceCoverageMatch","globalSetup","globalTeardown","globals","maxWorkers","moduleDirectories","moduleFileExtensions","moduleNameMapper","modulePathIgnorePatterns","notify","notifyMode","preset","projects","reporters","resetMocks","resetModules","resolver","restoreMocks","rootDir","roots","runner","setupFiles","setupFilesAfterEnv","slowTestThreshold","snapshotSerializers","testEnvironment","testEnvironmentOptions","testLocationInResults","testMatch","testPathIgnorePatterns","testRegex","testResultsProcessor","testRunner","transform","transformIgnorePatterns","unmockedModulePathPatterns","verbose","watchPathIgnorePatterns","watchman","_default"],"sources":["/Users/wonjaelee/Desktop/final/node_modules/jest-config/build/Descriptions.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst descriptions = {\n  automock: 'All imported modules in your tests should be mocked automatically',\n  bail: 'Stop running tests after `n` failures',\n  cacheDirectory:\n    'The directory where Jest should store its cached dependency information',\n  clearMocks:\n    'Automatically clear mock calls, instances, contexts and results before every test',\n  collectCoverage:\n    'Indicates whether the coverage information should be collected while executing the test',\n  collectCoverageFrom:\n    'An array of glob patterns indicating a set of files for which coverage information should be collected',\n  coverageDirectory:\n    'The directory where Jest should output its coverage files',\n  coveragePathIgnorePatterns:\n    'An array of regexp pattern strings used to skip coverage collection',\n  coverageProvider:\n    'Indicates which provider should be used to instrument code for coverage',\n  coverageReporters:\n    'A list of reporter names that Jest uses when writing coverage reports',\n  coverageThreshold:\n    'An object that configures minimum threshold enforcement for coverage results',\n  dependencyExtractor: 'A path to a custom dependency extractor',\n  errorOnDeprecated:\n    'Make calling deprecated APIs throw helpful error messages',\n  fakeTimers: 'The default configuration for fake timers',\n  forceCoverageMatch:\n    'Force coverage collection from ignored files using an array of glob patterns',\n  globalSetup:\n    'A path to a module which exports an async function that is triggered once before all test suites',\n  globalTeardown:\n    'A path to a module which exports an async function that is triggered once after all test suites',\n  globals:\n    'A set of global variables that need to be available in all test environments',\n  maxWorkers:\n    'The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.',\n  moduleDirectories:\n    \"An array of directory names to be searched recursively up from the requiring module's location\",\n  moduleFileExtensions: 'An array of file extensions your modules use',\n  moduleNameMapper:\n    'A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module',\n  modulePathIgnorePatterns:\n    \"An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\",\n  notify: 'Activates notifications for test results',\n  notifyMode:\n    'An enum that specifies notification mode. Requires { notify: true }',\n  preset: \"A preset that is used as a base for Jest's configuration\",\n  projects: 'Run tests from one or more projects',\n  reporters: 'Use this configuration option to add custom reporters to Jest',\n  resetMocks: 'Automatically reset mock state before every test',\n  resetModules: 'Reset the module registry before running each individual test',\n  resolver: 'A path to a custom resolver',\n  restoreMocks:\n    'Automatically restore mock state and implementation before every test',\n  rootDir:\n    'The root directory that Jest should scan for tests and modules within',\n  roots:\n    'A list of paths to directories that Jest should use to search for files in',\n  runner:\n    \"Allows you to use a custom runner instead of Jest's default test runner\",\n  setupFiles:\n    'The paths to modules that run some code to configure or set up the testing environment before each test',\n  setupFilesAfterEnv:\n    'A list of paths to modules that run some code to configure or set up the testing framework before each test',\n  slowTestThreshold:\n    'The number of seconds after which a test is considered as slow and reported as such in the results.',\n  snapshotSerializers:\n    'A list of paths to snapshot serializer modules Jest should use for snapshot testing',\n  testEnvironment: 'The test environment that will be used for testing',\n  testEnvironmentOptions: 'Options that will be passed to the testEnvironment',\n  testLocationInResults: 'Adds a location field to test results',\n  testMatch: 'The glob patterns Jest uses to detect test files',\n  testPathIgnorePatterns:\n    'An array of regexp pattern strings that are matched against all test paths, matched tests are skipped',\n  testRegex:\n    'The regexp pattern or array of patterns that Jest uses to detect test files',\n  testResultsProcessor:\n    'This option allows the use of a custom results processor',\n  testRunner: 'This option allows use of a custom test runner',\n  transform: 'A map from regular expressions to paths to transformers',\n  transformIgnorePatterns:\n    'An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation',\n  unmockedModulePathPatterns:\n    'An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them',\n  verbose:\n    'Indicates whether each individual test should be reported during the run',\n  watchPathIgnorePatterns:\n    'An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode',\n  watchman: 'Whether to use watchman for file crawling'\n};\nvar _default = descriptions;\nexports.default = _default;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,mEADS;EAEnBC,IAAI,EAAE,uCAFa;EAGnBC,cAAc,EACZ,yEAJiB;EAKnBC,UAAU,EACR,mFANiB;EAOnBC,eAAe,EACb,yFARiB;EASnBC,mBAAmB,EACjB,wGAViB;EAWnBC,iBAAiB,EACf,2DAZiB;EAanBC,0BAA0B,EACxB,qEAdiB;EAenBC,gBAAgB,EACd,yEAhBiB;EAiBnBC,iBAAiB,EACf,uEAlBiB;EAmBnBC,iBAAiB,EACf,8EApBiB;EAqBnBC,mBAAmB,EAAE,yCArBF;EAsBnBC,iBAAiB,EACf,2DAvBiB;EAwBnBC,UAAU,EAAE,2CAxBO;EAyBnBC,kBAAkB,EAChB,8EA1BiB;EA2BnBC,WAAW,EACT,kGA5BiB;EA6BnBC,cAAc,EACZ,iGA9BiB;EA+BnBC,OAAO,EACL,8EAhCiB;EAiCnBC,UAAU,EACR,gOAlCiB;EAmCnBC,iBAAiB,EACf,gGApCiB;EAqCnBC,oBAAoB,EAAE,8CArCH;EAsCnBC,gBAAgB,EACd,mIAvCiB;EAwCnBC,wBAAwB,EACtB,uHAzCiB;EA0CnBC,MAAM,EAAE,0CA1CW;EA2CnBC,UAAU,EACR,qEA5CiB;EA6CnBC,MAAM,EAAE,0DA7CW;EA8CnBC,QAAQ,EAAE,qCA9CS;EA+CnBC,SAAS,EAAE,+DA/CQ;EAgDnBC,UAAU,EAAE,kDAhDO;EAiDnBC,YAAY,EAAE,+DAjDK;EAkDnBC,QAAQ,EAAE,6BAlDS;EAmDnBC,YAAY,EACV,uEApDiB;EAqDnBC,OAAO,EACL,uEAtDiB;EAuDnBC,KAAK,EACH,4EAxDiB;EAyDnBC,MAAM,EACJ,yEA1DiB;EA2DnBC,UAAU,EACR,yGA5DiB;EA6DnBC,kBAAkB,EAChB,6GA9DiB;EA+DnBC,iBAAiB,EACf,qGAhEiB;EAiEnBC,mBAAmB,EACjB,qFAlEiB;EAmEnBC,eAAe,EAAE,oDAnEE;EAoEnBC,sBAAsB,EAAE,oDApEL;EAqEnBC,qBAAqB,EAAE,uCArEJ;EAsEnBC,SAAS,EAAE,kDAtEQ;EAuEnBC,sBAAsB,EACpB,uGAxEiB;EAyEnBC,SAAS,EACP,6EA1EiB;EA2EnBC,oBAAoB,EAClB,0DA5EiB;EA6EnBC,UAAU,EAAE,gDA7EO;EA8EnBC,SAAS,EAAE,yDA9EQ;EA+EnBC,uBAAuB,EACrB,2HAhFiB;EAiFnBC,0BAA0B,EACxB,4IAlFiB;EAmFnBC,OAAO,EACL,0EApFiB;EAqFnBC,uBAAuB,EACrB,kHAtFiB;EAuFnBC,QAAQ,EAAE;AAvFS,CAArB;AAyFA,IAAIC,QAAQ,GAAGtD,YAAf;AACAH,OAAO,CAACE,OAAR,GAAkBuD,QAAlB"},"metadata":{},"sourceType":"script"}